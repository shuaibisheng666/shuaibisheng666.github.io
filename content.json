{"meta":{"title":"sheng's blog","subtitle":"","description":"博客","author":"Ma JiaSheng","url":"https://shuaibisheng666.github.io","root":"/"},"pages":[{"title":"About","date":"2022-08-07T07:11:45.000Z","updated":"2025-07-29T07:00:21.620Z","comments":false,"path":"about/index.html","permalink":"https://shuaibisheng666.github.io/about/index.html","excerpt":"","text":"帅比升的博客"},{"title":"Repositories","date":"2025-07-28T19:48:24.392Z","updated":"2022-08-07T12:15:48.010Z","comments":false,"path":"repository/index.html","permalink":"https://shuaibisheng666.github.io/repository/index.html","excerpt":"","text":""},{"title":"Categories","date":"2022-08-07T11:32:22.000Z","updated":"2022-08-09T08:31:55.094Z","comments":false,"path":"categories/index.html","permalink":"https://shuaibisheng666.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-08-07T11:31:47.000Z","updated":"2022-08-08T16:12:59.464Z","comments":false,"path":"tags/index.html","permalink":"https://shuaibisheng666.github.io/tags/index.html","excerpt":"","text":""},{"title":"Links","date":"2022-08-07T07:11:21.000Z","updated":"2022-08-09T08:31:55.091Z","comments":false,"path":"links/index.html","permalink":"https://shuaibisheng666.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"单片机与程序内存空间与内存地址划分","slug":"单片机与程序内存空间与内存地址划分","date":"2025-07-31T11:42:45.000Z","updated":"2025-07-31T11:50:52.500Z","comments":true,"path":"2025/07/31/单片机与程序内存空间与内存地址划分/","link":"","permalink":"https://shuaibisheng666.github.io/2025/07/31/%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8E%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E5%88%92%E5%88%86/","excerpt":"","text":"一、 程序内存划分当我们将一个代码编译成可执行程序时，程序内部其实划分出了不同的内存空间，如下介绍： 1. 代码段（.text) 存储程序的机器指令（代码） 通常是只读的，防止程序被恶意修改 2. 数据段数据段分为三两个部分，一个是.data数据段，一个是.rodata数据段，一个是.bss数据段： 已初始化数据段（.rodata）存储已经被初始化的全局变量和静态变量 例如： 12int a = 5; // 在数据段中static int b = 3; // 也是 常量数据段(.rodata) 存储常量 例如： 1const a = 1; 未初始化数据段（.BSS）存储未初始化的全局变量和静态变量 系统会自动将它们初始化为 0 例如： 12int c; // 在 BSS 段中static int d; // 也是 3. 堆区（.heap） 用于动态内存分配 通过 malloc、new 等函数分配 手动释放（free 或 delete），否则会导致内存泄漏 堆区是向高地址方向增长的 4. 栈区（.stack） 用于函数调用和局部变量 每次调用函数时，会为该函数分配一个栈帧 函数返回后，栈帧会被释放 由系统自动管理 栈区是向低地址方向增长的 二、内存空间存储位置上面我们知道了程序会被分成不同的内存空间，但是这个内存空间不是连续的，比如他代码段会存在某个内存里，数据段会存在另一个内存里。 1. 代码段（Text Segment） → 通常在 Flash（只读存储器） 存储可执行程序的指令，在 MCU（微控制器）或嵌入式系统中，常常存放于 Flash 中（如 NOR Flash） 原因： Flash 是非易失性，掉电数据不会丢失 启动时 CPU 从 Flash 取指令执行 2. 数据段（Data Segment）→ 通常在 RAM（读写存储器）,也可能在flash .data数据段启动时，系统会从 Flash 中把初始化值拷贝到 RAM 中的数据段 .bss数据段 初始化代码会在RAM处分配一段空间给BSS 段，并将所有变量初始化为零。 .rodata数据段 由于存储的是只读常量，因此存在flash中 3. 堆（Heap）→ 在 RAM 中分配 用于运行时动态分配（malloc, new） 4. 栈（Stack）→ 也在 RAM 中分配 问： 为什么程序要划分数据段和代码段？答：目的是：便于管理、提高效率、匹配硬件特性。 代码段（.text） 存放编译后的机器指令（函数体等） 是只读的（Read-only） 通常放在 Flash 中（因为 Flash 可掉电保存）2. 数据段（.data &#x2F; .bss） 存放全局变量、静态变量等运行时用到的数据 是读写的（Read&#x2F;Write） 必须放在 RAM 中（RAM 可随时写入，适合存变量） 问：为什么不直接让变量在 Flash 中用？ 答：因为 Flash 有两个缺点： 写入速度慢（而 RAM 是纳秒级） 写入次数有限（约 1万~10万 次） 所以，只读常量（const）可以放 Flash，可写变量必须放 RAM。 三、 单片机内存空间划分1. 单片机内存映射以STM32单片机为例，单片机内存映射表如下： 这里面我们主要关注这一部分： 这几个地方中System memory和Flash是存放代码的地方，但System memory是芯片出厂自带的固件，不允许修改，Flash是用户可烧写的，keil烧写的代码通常就存在这个地方，我们可以在keil里的option-&gt;target里看到RAM和ROM的地址，其中ROM就是指FLASH，RAM就是指SRAM。 keil编译完会输出以下语句告诉你各个内存段的大小： 事实上SRAM也是可以存放代码启动的，一般是调试用，较少用。 2. 链接器虽然上面我们知道了程序会划分不同的内存空间，但是他怎么知道要怎么划分空间，把代码段放到哪个位置，数据段放到哪个位置，其实这是由链接器决定的，这是一个示例链接脚本, 链接器会根据设置将各个段的地址确定并初始化： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135/* Linker script to configure memory regions. *///定义了 Flash 和 RAM 的起始地址和大小MEMORY&#123; FLASH (rx) : ORIGIN = 0x80000000, LENGTH = 0x40000 /* 256k */ RAM (rwx) : ORIGIN = 0x20000000, LENGTH = 0x08000 /* 32k */&#125;/* Library configurations */GROUP(libgcc.a libc.a libm.a libnosys.a)// 设置程序入口为 Reset_Handler，这通常是由 startup_xxx.S 提供的函数，是系统上电后执行的第一个函数。ENTRY(Reset_Handler)SECTIONS&#123; .text : &#123; // 向量表、代码段、构造函数、常量，全部都放在 FLASH（程序空间） KEEP(*(.vectors)) __Vectors_End = .; __Vectors_Size = __Vectors_End - __Vectors; __end__ = .; *(.text*) KEEP(*(.init)) KEEP(*(.fini)) /* .ctors */ *crtbegin.o(.ctors) *crtbegin?.o(.ctors) *(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors) *(SORT(.ctors.*)) *(.ctors) /* .dtors */ *crtbegin.o(.dtors) *crtbegin?.o(.dtors) *(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors) *(SORT(.dtors.*)) *(.dtors) *(.rodata*) KEEP(*(.eh_frame*)) &#125; &gt; FLASH .ARM.extab : &#123; *(.ARM.extab* .gnu.linkonce.armextab.*) &#125; &gt; FLASH __exidx_start = .; .ARM.exidx : &#123; *(.ARM.exidx* .gnu.linkonce.armexidx.*) &#125; &gt; FLASH __exidx_end = .; __etext = .; .data : AT (__etext) &#123; // （已初始化的全局变量）放在 RAM，初始值从 Flash 拷贝 __data_start__ = .; *(vtable) *(.data*) . = ALIGN(4); /* preinit data */ PROVIDE_HIDDEN (__preinit_array_start = .); KEEP(*(.preinit_array)) PROVIDE_HIDDEN (__preinit_array_end = .); . = ALIGN(4); /* init data */ PROVIDE_HIDDEN (__init_array_start = .); KEEP(*(SORT(.init_array.*))) KEEP(*(.init_array)) PROVIDE_HIDDEN (__init_array_end = .); . = ALIGN(4); /* finit data */ PROVIDE_HIDDEN (__fini_array_start = .); KEEP(*(SORT(.fini_array.*))) KEEP(*(.fini_array)) PROVIDE_HIDDEN (__fini_array_end = .); KEEP(*(.jcr*)) . = ALIGN(4); /* All data end */ __data_end__ = .; &#125; &gt; RAM .bss : &#123; // .bss 段：未初始化全局/静态变量，放在 RAM，启动时清零 . = ALIGN(4); __bss_start__ = .; *(.bss*) *(COMMON) . = ALIGN(4); __bss_end__ = .; &#125; &gt; RAM .heap (COPY): &#123; __HeapBase = .; __end__ = .; end = __end__; KEEP(*(.heap*)) __HeapLimit = .; &#125; &gt; RAM /* .stack_dummy section doesn&#x27;t contains any symbols. It is only * used for linker to calculate size of stack sections, and assign * values to stack symbols later */ .stack_dummy (COPY): &#123; KEEP(*(.stack*)) &#125; &gt; RAM /* Set stack top to end of RAM, and stack limit move down by * size of stack_dummy section */ __StackTop = ORIGIN(RAM) + LENGTH(RAM); __StackLimit = __StackTop - SIZEOF(.stack_dummy); PROVIDE(__stack = __StackTop); /* Check if data + heap + stack exceeds RAM limit */ ASSERT(__StackLimit &gt;= __HeapLimit, &quot;region RAM overflowed with stack&quot;)&#125; 3. STM32启动流程现在总结一下单片机的启动流程： 上电复位（Reset）单片机通电后，复位电路将所有寄存器、状态置为默认。 从0x0000000处读取中断向量表 前面的内存映射表，最底下的区域Aliased to Flash,system memory or SRAM depending on the BOOT pins指的是硬件会根据boot引脚的状态去将0x00000000映射到Flash， system memory 或 SRAM。 而从0x0000000处读取中断向量表就相当于从这几个位置读取。 MCU 从地址 0x0000_0000读取： [0x0000_0000] → 初始 主栈指针 MSP [0x0000_0004] → 复位中断服务函数地址 Reset_Handler 这两个是启动关键。 跳转到 Reset_Handler（启动入口） MCU 跳转到 Reset_Handler() 函数，开始执行启动代码。 Reset_Handler 是startup_xxx.s 文件提供的，它负责初始化系统。 Reset_Handler会跳转到__main函数，由c库提供 __main函数作用： 初始化硬件环境 在单片机启动时，__main 会调用硬件初始化函数（如 SystemInit），完成以下任务： 配置系统时钟。 初始化中断向量表。 关闭看门狗以避免复位干扰。 设置堆栈指针和堆栈大小。 初始化软件环境 __main 负责为 C 程序运行准备必要的软件环境，包括： 将只读数据（RO）和读写数据（RW）从 Flash 复制到 RAM。 清零未初始化的数据段（ZI）。 初始化 C 库环境，为全局变量和静态变量分配内存。 调用用户的 main 函数 在完成上述初始化后，__main 会跳转到用户定义的 main 函数，正式开始程序的主要逻辑","categories":[{"name":"单片机","slug":"单片机","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"stm32","slug":"单片机/stm32","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/stm32/"}],"tags":[{"name":"stm32","slug":"stm32","permalink":"https://shuaibisheng666.github.io/tags/stm32/"},{"name":"单片机","slug":"单片机","permalink":"https://shuaibisheng666.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"内存","slug":"内存","permalink":"https://shuaibisheng666.github.io/tags/%E5%86%85%E5%AD%98/"}]},{"title":"linux驱动操作设备的方式区别","slug":"linux驱动操作设备的方式区别","date":"2025-07-21T15:38:54.000Z","updated":"2025-07-29T07:57:24.906Z","comments":true,"path":"2025/07/21/linux驱动操作设备的方式区别/","link":"","permalink":"https://shuaibisheng666.github.io/2025/07/21/linux%E9%A9%B1%E5%8A%A8%E6%93%8D%E4%BD%9C%E8%AE%BE%E5%A4%87%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/","excerpt":"","text":"我们在linux开发板上操作硬件时，有时候可以通过 操作 &#x2F;sys&#x2F;class&#x2F;***，有时候也可以通过操作&#x2F;dev&#x2F;***来实现控制设备 比如操作led时，有时候可以通过： echo 1 &gt; &#x2F;sys&#x2F;class&#x2F;led&#x2F;brightness 有时候可以通过 echo 1 &gt; &#x2F;dev&#x2F;led 来控制led的亮灭 但是这之间有什么区别？ 1. 文件类型不同（1）&#x2F;sys&#x2F;class&#x2F;*** 文件本质是一个伪文件，是一个符号链接,链接到&#x2F;sys&#x2F;device&#x2F;*** 下某个设备如： 123root@localhost:~# ls -l /sys/class/leds/rgb-led-rlrwxrwxrwx 1 root root 0 Feb 28 11:36 /sys/class/leds/rgb-led-r -&gt; ../../devices/platform/leds/leds/rgb-led-r （2）&#x2F;sys&#x2F;device&#x2F; 下的设备是伪文件，是内核暴露出来方便调试，查看一些信息的 （3） &#x2F;dev&#x2F;下的文件是POSIX 标准文件 &#x2F;dev&#x2F;下的文件是一个设备节点，是有主次设备号的 1234root@localhost:~# ls -l /dev/tty0crw--w---- 1 root tty 4, 0 Feb 28 11:36 /dev/tty0c代表是字符设备，4代表主设备号， 0代表子设备号 2. 注册方式不同（1）&#x2F;sys&#x2F;class&#x2F;*** 的注册 &#x2F;sys&#x2F;class&#x2F;* 是通过 **class_create**函数在驱动内部注册的。 **class_create**：创建一个设备类（如 leds、gpio 等）。 函数最终会在 /sys/class/ 下生成对应的目录和文件。 示例代码： 1struct class *cls = class_create(THIS_MODULE, &quot;leds&quot;); 结果： 1/sys/class/leds/red （2）&#x2F;sys&#x2F;devices&#x2F;*** 的注册 &#x2F;sys&#x2F;devices&#x2F;* 是通过 platform_device_register 或 platform_device_register_simple 函数在驱动内部注册的。 这些函数会将设备注册到 platform 总线，并在 /sys/devices/ 下生成对应的目录和文件。 这些目录和文件记录了设备的详细信息，如 driver、modalias、of_node 等。 示例代码： 1struct platform_device *pdev = platform_device_register_simple(&quot;leds&quot;, -1, NULL, 0); 结果： 1/sys/devices/platform/leds （3） &#x2F;dev&#x2F;* 的注册 &#x2F;dev&#x2F;* 是通过 device_create 或 cdev_add 函数在驱动内部注册的。 **device_create**：创建一个字符设备节点。 **cdev_add**：注册字符设备并分配主次设备号。 这些函数最终会在 /dev/ 下生成对应的设备节点文件。 也可以通过 mknod 命令在用户空间手动创建设备节点。 示例代码： 12345alloc_chrdev_region(&amp;devid, 0, 1, &quot;led&quot;);cdev_init(&amp;cdev, &amp;fops);cdev_add(&amp;cdev, devid, 1);cls = class_create(THIS_MODULE, &quot;led&quot;);device_create(cls, NULL, devid, NULL, &quot;led&quot;); 结果： 1/dev/led 用户空间手动创建： 3. 实现方式不同（1）假如你在驱动下面通过device_create注册设备节点的话，一般来说你需要实现file_operations。设备节点是通过标准文件接口来实现与用户空间的交互。 （2）而sysfs 文件系统提供控制接口（如 led的brightness、trigger 等），这些接口不需要 file_operations。sysfs 文件系统直接暴露设备的属性和状态，用户空间程序可以通过 echo、cat 等命令 操作这些文件。 4. 总结 &#x2F;sys&#x2F;class&#x2F;* 和 &#x2F;sys&#x2F;devices&#x2F;* 是内核暴露的 sysfs 文件系统，用于调试和配置设备属性。 &#x2F;sys&#x2F;class&#x2F;* 是 &#x2F;sys&#x2F;devices&#x2F;* 的快捷方式，按功能分类组织设备。 &#x2F;dev&#x2F;* 是 POSIX 标准设备节点，用于 字节流&#x2F;块流 I&#x2F;O。 &#x2F;dev&#x2F;* 是由驱动或 udev 创建的，用于 POSIX 标准文件 I&#x2F;O。","categories":[{"name":"linux驱动","slug":"linux驱动","permalink":"https://shuaibisheng666.github.io/categories/linux%E9%A9%B1%E5%8A%A8/"}],"tags":[{"name":"linux驱动","slug":"linux驱动","permalink":"https://shuaibisheng666.github.io/tags/linux%E9%A9%B1%E5%8A%A8/"},{"name":"linux","slug":"linux","permalink":"https://shuaibisheng666.github.io/tags/linux/"}]},{"title":"强化学习之DQN控制倒立摆","slug":"强化学习之DQN控制倒立摆","date":"2024-12-19T15:07:42.000Z","updated":"2024-12-19T15:12:25.607Z","comments":true,"path":"2024/12/19/强化学习之DQN控制倒立摆/","link":"","permalink":"https://shuaibisheng666.github.io/2024/12/19/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BDQN%E6%8E%A7%E5%88%B6%E5%80%92%E7%AB%8B%E6%91%86/","excerpt":"","text":"一、强化学习介绍强化学习（Reinforcement learning，RL）是人工智能和自动控制的一个交叉学科分支。 强化学习（RL）是人工智能和自动控制的一个交叉学科分支。他讨论的问题是一个智能体(agent) 怎么在一个复杂不确定的环境(environment) 里面去极大化它能获得的奖励。通过感知所处环境的 状态(state) 对 动作(action) 的 反应(reward)， 来指导更好的动作，从而获得最大的 收益(return)，这被称为在交互中学习，这样的学习方法就被称作强化学习。 近些年强化学习发展迅速，并且广泛应用于各个领域，例如自动驾驶，游戏，机器人控制等等。比如前些年大火的AlphaGo就采取了深度学习和强化学习的方法，在围棋领域战胜了人类最强的棋手。 环境(Environment) 是一个外部系统，智能体处于这个系统中，能够感知到这个系统并且能够基于感知到的状态做出一定的行动。 智能体(Agent) 是一个嵌入到环境中的系统，能够通过采取行动来改变环境的状态。 状态(State)&#x2F;观察值(Observation)：状态是对世界的完整描述，不会隐藏世界的信息。观测是对状态的部分描述，可能会遗漏一些信息。 动作(Action)：不同的环境允许不同种类的动作，在给定的环境中，有效动作的集合经常被称为动作空间(action space)，包括离散动作空间(discrete action spaces)和连续动作空间(continuous action spaces)，例如，走迷宫机器人如果只有东南西北这 4 种移动方式，则其为离散动作空间;如果机器人向 360◦ 中的任意角度都可以移动，则为连续动作空间。 奖励(Reward)：是由环境给的一个标量的反馈信号(scalar feedback signal)，这个信号显示了智能体在某一步采 取了某个策略的表现如何。 打个比方，假设我们操控一个游戏角色在一个二维地图上探索， 那么整张地图就是环境，而这名游戏角色就是一个智能体，智能体可以采取四个动作，上下左右，这四个动作构成一个动作空间，这个智能体所处的位置就是他的状态，当他执行某一个动作时，他的位置，也就是状态就会更新，同时环境会给他一个reward。这张地图有三种不同的格子，蓝色的代表安全的，红色的代表危险，草色的代表目标，当我们采取动作进入一个蓝色格子时，reward为0，进入红色格子时，reward为-10，进入草色格子时，reward为+5。 通过不停的在这个环境中探索，这个智能体应该能学到如何快速到达目标格子，规避危险的格子。 二、Q-learning算法Q-learning 是强化学习中一个非常经典的算法，是一种基于值迭代的强化学习算法，主要用于在给定环境中学习一个策略，使得智能体（agent）能够在与环境交互的过程中获得最大累计奖励。它通过学习一个状态-动作值函数（Q函数）来指导智能体的行为选择，适用于各种离散状态和动作的任务环境。 Q 学习算法使用状态动作值（也称为 Q 值）的 Q 表。这个 Q 表对每个状态有一行，对每个动作有一个列。每个单元格包含相应状态-动作对的估计 Q 值。我们首先将所有 Q 值初始化为零。当agent与环境交互并获得反馈时，算法会迭代地改进这些 Q 值，直到它们收敛到最优 Q 值。它使用贝尔曼方程更新它们。 我们还是使用上面图中机器人走迷宫的例子来说明Q-learning算法。 那么图中智能体的位置就是状态，上下左右就是动作，那么我们可以构建如下的Q表： 当智能体处于某个位置(状态），他会从表里那一行的四个动作里选择一个Q值最大的动作执行，当然我们一开始的Q表是全为0的，那么智能体的动作就完全随机，相当于完全处于探索状态。 那么我们的目标就是优化这张Q表，让智能体能根据这张Q表做出“明智”的选择。 大概过程如下： 智能体四处探索，每次执行一次动作后，我们会获得下一个状态和reward以及下一个状态每一个动作的Q值，我们取里面最大的Q值和reward来更新当前执行的这个动作的Q值。 伪代码如下： 三、DQN算法但是Qlearning是有局限性的，就是有时候智能体的状态是无穷多的，我们用Q表无法完全表示，比如倒立摆情况下，杆子的状态是由位置速度等变量组成的，但是杆子的位置速度等并非离散值而是一个连续值，比如杆子的速度可以是1，也可以是1.1，也可以是1.11，相当于状态是无穷多的，这个时候我们就不使用Q表了，而是使用神经网络来代替这张Q表，当输入一个状态时，我们会输出各个动作的Q值，然后从里面选择Q值最大的动作执行。 除了用神经网络代替Q表外，DQN还有两个独特的机制，分别是新旧两个神经网络和经验回放机制。经验回放：智能体在与环境交互过程中，将经历的状态转移存储在经验回放缓冲区中。每次训练时，从缓冲区中随机抽取小批量样本进行训练，以打破数据之间的相关性。 目标网络：DQN使用两个网络：一个是当前的Q网络，另一个是目标网络。目标网络的参数在一定的时间间隔内更新，以减少训练过程中的波动。目标网络的引入使得Q值的更新更加稳定。流程图如下： 四、倒立摆控制实验接下来我们通过一个实际的例子来演示一下DQN，我们将在gym仿真环境下实现倒立摆的控制。 OpenAI Gym仿真环境介绍 Gym是由OpenAI开发的一个用于强化学习研究的工具包，它提供了大量的标准化的仿真环境，供研究人员和开发者测试和开发强化学习算法。Gym的设计目的是简化和标准化强化学习的实验环境，以便能够方便地评估不同的RL算法。 Gym提供了统一的接口，使得不同的强化学习算法能够在不同的环境中进行训练和测试。接下来我们使用Gym仿真环境提供的一个倒立摆仿真环境CartPole-v1。 Cart Pole即车杆游戏，游戏模型如下图所示。游戏里面有一个小车，上有竖着一根杆子，每次重置后的初始状态会有所不同。小车需要左右移动来保持杆子竖直，为了保证游戏继续进行需要满足以下两个条件： 杆子倾斜的角度θ 不能大于15° 小车移动的位置x需保持在一定范围（中间到两边各2.4个单位长度） 对于这么一个系统，我们主要关注如下几个变量：动作（action）： 左移（0） 右移（1） 状态变量（state variables）： x ：小车在轨道上的位置（position of the cart on the track） θ：杆子与竖直方向的夹角（angle of the pole with the vertical） x’：小车速度（cart velocity） θ‘：角度变化率（rate of change of the angle） 转换成强化学习的语言，就是小车和杆相当于一个智能体，小车的速度和位置和杆的角度和角速度4个状态构成了一个智能体的状态，智能体需要根据自己当前的状态执行一个动作，执行完动作后环境需要返回智能体的下一个状态和reward，智能体需要根据得到的下一个状态和reward更新自己的决策。 之所以我们选择DQN来控制倒立摆而不使用Qlearning的原因在于，倒立摆的状态变量取值是连续的，因此倒立摆的状态是无穷的，我们不可能用一个Q表来储存这个智能体的全部状态，因此我们选择神经网络来获得动作的Q值。 完整代码如下：import gymnasium as gymimport mathimport randomimport matplotlibimport matplotlib.pyplot as pltfrom collections import namedtuple, dequefrom itertools import countimport torchimport torch.nn as nnimport torch.optim as optimimport torch.nn.functional as Fenv = gym.make(&#x27;CartPole-v1&#x27;, render_mode=&#x27;human&#x27;)# set up matplotlibis_ipython = &#x27;inline&#x27; in matplotlib.get_backend()if is_ipython: from IPython import displayplt.ion()# if GPU is to be useddevice = torch.device( &quot;cuda&quot; if torch.cuda.is_available() else &quot;mps&quot; if torch.backends.mps.is_available() else &quot;cpu&quot;)Transition = namedtuple(&#x27;Transition&#x27;, (&#x27;state&#x27;, &#x27;action&#x27;, &#x27;next_state&#x27;, &#x27;reward&#x27;))class ReplayMemory(object): def __init__(self, capacity): self.memory = deque([], maxlen=capacity) def push(self, *args): &quot;&quot;&quot;Save a transition&quot;&quot;&quot; self.memory.append(Transition(*args)) def sample(self, batch_size): return random.sample(self.memory, batch_size) def __len__(self): return len(self.memory) class DQN(nn.Module): def __init__(self, n_observations, n_actions): super(DQN, self).__init__() self.layer1 = nn.Linear(n_observations, 128) self.layer2 = nn.Linear(128, 128) self.layer3 = nn.Linear(128, n_actions) # Called with either one element to determine next action, or a batch # during optimization. Returns tensor([[left0exp,right0exp]...]). def forward(self, x): x = F.relu(self.layer1(x)) x = F.relu(self.layer2(x)) return self.layer3(x) # BATCH_SIZE is the number of transitions sampled from the replay buffer# GAMMA is the discount factor as mentioned in the previous section# EPS_START is the starting value of epsilon# EPS_END is the final value of epsilon# EPS_DECAY controls the rate of exponential decay of epsilon, higher means a slower decay# TAU is the update rate of the target network# LR is the learning rate of the ``AdamW`` optimizerBATCH_SIZE = 128GAMMA = 0.99EPS_START = 0.9EPS_END = 0.05EPS_DECAY = 1000TAU = 0.005LR = 1e-4# Get number of actions from gym action spacen_actions = env.action_space.n# Get the number of state observationsstate, info = env.reset()n_observations = len(state)policy_net = DQN(n_observations, n_actions).to(device)target_net = DQN(n_observations, n_actions).to(device)target_net.load_state_dict(policy_net.state_dict())optimizer = optim.AdamW(policy_net.parameters(), lr=LR, amsgrad=True)memory = ReplayMemory(10000)steps_done = 0def select_action(state): global steps_done sample = random.random() eps_threshold = EPS_END + (EPS_START - EPS_END) * \\ math.exp(-1. * steps_done / EPS_DECAY) steps_done += 1 if sample &gt; eps_threshold: with torch.no_grad(): # t.max(1) will return the largest column value of each row. # second column on max result is index of where max element was # found, so we pick action with the larger expected reward. return policy_net(state).max(1).indices.view(1, 1) else: return torch.tensor([[env.action_space.sample()]], device=device, dtype=torch.long)episode_durations = []def plot_durations(show_result=False): plt.figure(1) durations_t = torch.tensor(episode_durations, dtype=torch.float) if show_result: plt.title(&#x27;Result&#x27;) else: plt.clf() plt.title(&#x27;Training...&#x27;) plt.xlabel(&#x27;Episode&#x27;) plt.ylabel(&#x27;Duration&#x27;) plt.plot(durations_t.numpy()) # Take 100 episode averages and plot them too if len(durations_t) &gt;= 100: means = durations_t.unfold(0, 100, 1).mean(1).view(-1) means = torch.cat((torch.zeros(99), means)) plt.plot(means.numpy()) plt.pause(0.001) # pause a bit so that plots are updated if is_ipython: if not show_result: display.display(plt.gcf()) display.clear_output(wait=True) else: display.display(plt.gcf())def optimize_model(): if len(memory) &lt; BATCH_SIZE: return transitions = memory.sample(BATCH_SIZE) # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for # detailed explanation). This converts batch-array of Transitions # to Transition of batch-arrays. batch = Transition(*zip(*transitions)) # Compute a mask of non-final states and concatenate the batch elements # (a final state would&#x27;ve been the one after which simulation ended) non_final_mask = torch.tensor(tuple(map(lambda s: s is not None, batch.next_state)), device=device, dtype=torch.bool) non_final_next_states = torch.cat([s for s in batch.next_state if s is not None]) state_batch = torch.cat(batch.state) action_batch = torch.cat(batch.action) reward_batch = torch.cat(batch.reward) # Compute Q(s_t, a) - the model computes Q(s_t), then we select the # columns of actions taken. These are the actions which would&#x27;ve been taken # for each batch state according to policy_net state_action_values = policy_net(state_batch).gather(1, action_batch) # Compute V(s_&#123;t+1&#125;) for all next states. # Expected values of actions for non_final_next_states are computed based # on the &quot;older&quot; target_net; selecting their best reward with max(1).values # This is merged based on the mask, such that we&#x27;ll have either the expected # state value or 0 in case the state was final. next_state_values = torch.zeros(BATCH_SIZE, device=device) with torch.no_grad(): next_state_values[non_final_mask] = target_net(non_final_next_states).max(1).values # Compute the expected Q values expected_state_action_values = (next_state_values * GAMMA) + reward_batch # Compute Huber loss criterion = nn.SmoothL1Loss() loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1)) # Optimize the model optimizer.zero_grad() loss.backward() # In-place gradient clipping torch.nn.utils.clip_grad_value_(policy_net.parameters(), 100) optimizer.step()if torch.cuda.is_available() or torch.backends.mps.is_available(): num_episodes = 600else: num_episodes = 50for i_episode in range(num_episodes): # Initialize the environment and get its state state, info = env.reset() state = torch.tensor(state, dtype=torch.float32, device=device).unsqueeze(0) for t in count(): env.render() # Render the environment action = select_action(state) observation, reward, terminated, truncated, _ = env.step(action.item()) reward = torch.tensor([reward], device=device) done = terminated or truncated if terminated: next_state = None else: next_state = torch.tensor(observation, dtype=torch.float32, device=device).unsqueeze(0) # Store the transition in memory memory.push(state, action, next_state, reward) # Move to the next state state = next_state # Perform one step of the optimization (on the policy network) optimize_model() # Soft update of the target network&#x27;s weights # θ′ ← τ θ + (1 −τ )θ′ target_net_state_dict = target_net.state_dict() policy_net_state_dict = policy_net.state_dict() for key in policy_net_state_dict: target_net_state_dict[key] = policy_net_state_dict[key]*TAU + target_net_state_dict[key]*(1-TAU) target_net.load_state_dict(target_net_state_dict) if done: episode_durations.append(t + 1) plot_durations() breakprint(&#x27;Complete&#x27;)plot_durations(show_result=True)plt.ioff()plt.show() 代码运行结果如下： 从左边的表可以看到，随着训练的epoch逐渐增加，倒立摆的持续时间越来越长。","categories":[{"name":"强化学习","slug":"强化学习","permalink":"https://shuaibisheng666.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"},{"name":"DQN","slug":"强化学习/DQN","permalink":"https://shuaibisheng666.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN/"}],"tags":[{"name":"强化学习","slug":"强化学习","permalink":"https://shuaibisheng666.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"},{"name":"DQN","slug":"DQN","permalink":"https://shuaibisheng666.github.io/tags/DQN/"},{"name":"倒立摆","slug":"倒立摆","permalink":"https://shuaibisheng666.github.io/tags/%E5%80%92%E7%AB%8B%E6%91%86/"}]},{"title":"python函数参数中的args,kwargs是什么意思","slug":"python函数参数中的args,kwargs是什么意思","date":"2024-07-08T06:00:00.000Z","updated":"2024-07-08T06:45:42.882Z","comments":true,"path":"2024/07/08/python函数参数中的args,kwargs是什么意思/","link":"","permalink":"https://shuaibisheng666.github.io/2024/07/08/python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84args,kwargs%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/","excerpt":"","text":"python函数参数中的*args, **kwargs是什么意思： 你可能会想到c语言中的int main(int argc, char const *argv[])，但这二者意思完全不同。c语言的int main(int argc, char const *argv[])在我另一篇文章中有讲到，是为了确定传入参数个数和参数名称的，且是main函数特有的。 而在Python中，*args 和 **kwargs 是用来处理函数定义中可变数量的参数的特殊语法： *args 用于传递非关键字参数列表（位置参数），它允许将不定数量的参数作为元组传递给一个函数。当函数被调用时，这些参数会被打包进一个元组中。例如： 1234567def my_function(*args): print(args)my_function(1, 2, 3)输出：(1,2,3,) **kwargs 用于传递关键字参数（键值对），它允许将不定数量的关键字参数作为字典传递给一个函数。当函数被调用时，这些参数会被打包进一个字典中。例如： 1234567def my_function(**kwargs): print(kwargs)my_function(a=1, b=2, c=3)输出：&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125; 如果*args, **kwargs一起用, 则示例如下： 12345678def my_function(*args,**kwargs): print(kwargs)my_function(1, b=2, c=3)输出：(1,)&#123;&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125; 那么你可能会问my_function(1, b&#x3D;2, 3)会输出什么，答案是会报错，因为python规定位置参数不能在关键字参数后面。 当然c语言中也有类似的传入参数个数不固定的情况，是通过导入stdarg.h库解决的，具体可看我另一篇文章。","categories":[{"name":"python","slug":"python","permalink":"https://shuaibisheng666.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://shuaibisheng666.github.io/tags/python/"},{"name":"可变参数","slug":"可变参数","permalink":"https://shuaibisheng666.github.io/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"}]},{"title":"printf函数参数个数可变实现原理","slug":"printf函数参数个数可变实现原理","date":"2024-07-06T17:00:00.000Z","updated":"2024-07-06T17:08:06.316Z","comments":true,"path":"2024/07/07/printf函数参数个数可变实现原理/","link":"","permalink":"https://shuaibisheng666.github.io/2024/07/07/printf%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E5%8F%AF%E5%8F%98%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/","excerpt":"","text":"我们在使用printf函数时会发现，printf函数与其他函数最大的区别就在于该函数可以接收不同数量的参数，如下： 12printf(&quot;%d&quot;,1);printf(&quot;%d,%d&quot;,1,2); 那么这是怎么实现的呢？ 原因在于printf函数使用了&lt;stdarg.h&gt;库，这个库是c语言内置的标准库，专门用来处理参数数量可变的情况。 而且处理参数数量可变情况一般写法是这样的： 1int fun(int args,...) 这里args指后面跟着的参数数量，… 表示可变参数（variadic arguments）。它允许一个函数接受数量可变的参数，即可以接受不定数量的参数。 假如你去stdio.h查找printf函数，你会发现printf函数声明是这样的： 1extern int printf (const char *__restrict __format, ...); 第一个参数是一个字符串，后面的省略号就是可变参数。 接下来我们自己实现一个带可变参数的函数，主要使用的就是stdarg.h库里的va_list，va_start(), va_arg(), va_end()函数。示例： 123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;//一定要包含这个库#include &lt;stdarg.h&gt;//一定要带省略号，代表可变参数void fun(int args,...)&#123; va_list va; //只有带省略号的函数才能调用va_start函数，否则会报错 va_start(va,args); for(int i=0;i&lt;args;i++)&#123; printf(&quot;%d\\n&quot;,va_arg(va,int)); &#125; va_end(va);&#125;int main()&#123; //第一个2指后面跟2个参数 fun(2,1,2); fun(3,1,2,3); return 0;&#125;输出：12123 逐行分析： void fun(int args,…) 定义一个带可变参数的函数，省略号代表可变参数，注意省略号前一定要至少有一个参数，因为 va_start 宏需要一个确定的参数来定位变长参数列表。 va_list va; 定义一个变长参数列表va，va_list 来自stdarg.h 库。 va_start(va,args); 这个函数意思是让va指向args后面的可变参数列表，也就是省略号代表的起始地址，假如函数是void fun(int args,int a，…) 那么这里就应该改成va_start(va,a) 后面的循环就是根据第一个参数的多少循环打印后面跟着的参数，va_arg(va,int)就是指从va里以int类型取出一个参数，其参数指针会自动递增。 va_end(args) 用于结束对可变参数列表的访问。 可以看到，写法基本是比较固定的，就是定义va_list, 然后初始化va_start,va_arg取出参数,va_end结束访问。 假如你可变参数只有3个，但你却调用了四次va_arg取出参数，那么可能会访问越界内存，虽然不会报错，但会得到一个未知的数据。 而va_list 本身并不直接包含参数个数的信息，因为可变参数列表在函数内部并没有一个固定的结构或长度信息。这也就是为什么我们第一个参数一般都是后面可变参数的个数，就是为了确保不会越界。 可是printf第一个参数是字符串，并不知道后面可变参数的个数，它是怎么确保va_list不越界的呢？ 原因是通过你字符串里的格式化输出个数来确保不越界的，比如printf(“%d,%s”,a,b)，检测到%d就调用一次va_arg取出参数， 检测到%s就调用一次va_arg取出参数，这样就不会越界了。 当然，如果你格式化输出个数和后面的参数个数不匹配，比如printf(“%d,%c\\n”,1)，这样虽然编译器会警告，但实际也能编译通过， 但结果就是会调用两次va_arg取出两个参数，结果就是访问越界输出一个奇怪的结果。","categories":[{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/categories/c%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/tags/c%E8%AF%AD%E8%A8%80/"}],"author":"Jiasheng Ma"},{"title":"c语言中main函数的形参是什么意思","slug":"c语言中main函数的形参是什么意思","date":"2024-07-06T14:00:00.000Z","updated":"2024-07-06T17:01:47.420Z","comments":true,"path":"2024/07/06/c语言中main函数的形参是什么意思/","link":"","permalink":"https://shuaibisheng666.github.io/2024/07/06/c%E8%AF%AD%E8%A8%80%E4%B8%ADmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/","excerpt":"","text":"有些c程序的main函数参数里经常会出现int argc, char const *argv[]，如下： 123456#include &lt;stdio.h&gt;int main(int argc, char const *argv[])&#123; return 0;&#125; 这是什么意思呢。 从类型上看，第一个参数是一个整型，第二个是一个字符串数组，这代表什么呢？ 实际上，这是c语言入口函数main特有的一个特性。argc和argv的意思是： argc：表示命令行参数的数量（argument count），即程序运行时传递给程序的参数个数，包括程序名称本身。在调用程序时，至少会有一个参数，即程序的名称。 argv[]：是一个指向字符串数组的指针（argument vector），每个元素是一个指向传递给程序的参数的字符串指针。 举个例子： 1234567891011121314151617181920#include &lt;stdio.h&gt;int main(int argc, char const *argv[])&#123; printf(&quot;%c\\n&quot;,argc); for(int i=0;i&lt;argc;i++)&#123; printf(&quot;%s\\n&quot;,argv[i]); &#125; return 0;&#125;terminal：编译：gcc test.c -o test运行: ./test a ab abc输出：4./testaababc 你会发现你明明输入3个参数a,ab,abc，但argc却是4，原因是程序名称本身也会被作为参数传入进去。因此最终输出.&#x2F;test，a，ab，abc 当然改变argc和argv名称也是可以的，效果一样。 但是注意main函数的形参第一个一定要是int，第二个要是字符串数组，否则是不生效的。","categories":[{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/categories/c%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/tags/c%E8%AF%AD%E8%A8%80/"}],"author":"Jiasheng Ma"},{"title":"函数指针与函数数组","slug":"函数指针与函数数组","date":"2024-07-06T12:00:00.000Z","updated":"2024-07-09T13:23:04.772Z","comments":true,"path":"2024/07/06/函数指针与函数数组/","link":"","permalink":"https://shuaibisheng666.github.io/2024/07/06/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84/","excerpt":"","text":"1. 函数指针我们都知道c语言指针可以指向整形，浮点型，字符等等，但实际上指针也可以指向函数。 实际上当我们定义一个函数时，最终都会创建一个函数指针存储函数的地址。 那么函数指针怎么定义呢？函数指针的定义不同于其他变量的定义，其他变量的定义是这样的： 1变量类型 变量名； 但c语言没有函数类型这一变量类型，因为函数类型太多了，你可以给一个函数传入整形，浮点，也可以返回字符，指针等等， 因此函数类型不是单一的。 因此要确定一个函数的类型需要确定他的形参数量和类型，返回参数的类型。 因此函数指针的定义是： 1函数返回类型 (*指针名)(形参类型1,形参类型2); 注意这里(指针名)的括号不能去掉，否则的话就会变成 函数返回类型 *指针名(形参类型1,形参类型2); 这个的意思是定义一个返回类型为指针的函数 示例： 12345678910111213#include &lt;stdio.h&gt;void fun1()&#123; printf(&quot;fun\\n&quot;);&#125;int main()&#123; //定义一个指向返回类型为void，无形参的函数的指针 void (*a)() = fun; //调用函数 a(); return 0;&#125;输出：fun 通过函数指针我们就可以将一个函数1传给另一个函数2当做形参，如： 123456789101112131415161718#include &lt;stdio.h&gt;void fun(int i)&#123; printf(&quot;fun%d\\n&quot;,i);&#125;void fun2(void (*a)(int),int i)&#123; a(i);&#125;int main()&#123; //定义一个指向返回类型为void，形参为int的函数的指针 void (*fun_pointer)(int) = fun; //将函数指针作为参数传给fun2 fun2(fun_pointer,1); return 0;&#125;输出：fun1 2. 函数数组不止如此，c语言除了函数指针，还有函数数组，定义方式和函数指针也很相似，只需要加个[]即可： 1函数返回类型 (*数组名[])(形参类型1,形参类型2); 示例： 12345678910111213141516171819#include &lt;stdio.h&gt;void fun1()&#123; printf(&quot;fun1\\n&quot;);&#125;void fun2()&#123; printf(&quot;fun2\\n&quot;);&#125;//定义一个函数数组void (*a[])() = &#123;fun1,fun2&#125;;int main()&#123; a[0](); a[1](); return 0;&#125;输出：fun1fun2","categories":[{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/categories/c%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"指针","permalink":"https://shuaibisheng666.github.io/tags/%E6%8C%87%E9%92%88/"}],"author":"Jiasheng Ma"},{"title":"pytorch中nn.module如何自动调用forward()方法","slug":"pytorch中nn.module如何自动调用forward()方法","date":"2024-07-05T09:00:00.000Z","updated":"2024-07-08T12:41:35.329Z","comments":true,"path":"2024/07/05/pytorch中nn.module如何自动调用forward()方法/","link":"","permalink":"https://shuaibisheng666.github.io/2024/07/05/pytorch%E4%B8%ADnn.module%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8forward()%E6%96%B9%E6%B3%95/","excerpt":"","text":"当我们在使用pytorch的时候，观察以下例子： 12345678910111213141516171819202122from torch import nnimport torchclass Net(nn.Module): def __init__(self): print(&#x27;init&#x27;) super().__init__() def forward(self, input): output = input + 1 print(&quot;forward&quot;) return outputnet = Net()x = torch.tensor(1.0)out = net(x)print(out)输出：initforwardtensord(2.) 定义一个神经网络Net后实现forward方法，后续实例化为net网络后直接传入x即可自动调用forward方法，可明明我们并未调用forward()方法，具体如何实现的呢？ 原因在于Net继承于nn.Module，而nn.Module内部实现了_call_()方法， 在Python中，_call_() 是一个特殊方法（也称为魔术方法或魔法方法），用于使对象实例可以像函数一样被调用。当一个类定义了 _call_() 方法时，它的实例可以像调用函数一样被调用，而不仅仅是通过类中的其他方法来调用。如下例子： 12345678910111213141516class Test(): def __init__(self): print(&#x27;init&#x27;) def __call__(self,a): print(&#x27;call&#x27;) print(a)test = Test()print(test(&#x27;test&#x27;))输出：initcalltest 而在pytorch中，_call_()方法会自动调用forward()方法。 具体说：当你调用net(x)后，net会自动调用_call_()方法, 相当于net._call_(x),而_call_()又会自动调用forward()方法。 相当于：net(x) –&gt; net._call_(x) –&gt;net.forward(x) pytorch源码分析： 1234from typing import Callableclass Module(): __call__ : Callable[..., Any] = _wrapped_call_impl 可以看到虽然有_call_()方法，但他并没有像我们上面写的那样定义一个def _call_()方法，分析一下这句话： 1__call__ : Callable[..., Any] = _wrapped_call_impl 这里Callable[…, Any] 是一个类型提示，用来表示一个可调用对象的类型。类型提示是什么： 类型提示是一种在函数参数、返回值以及变量上添加类型信息的注解，这些注解并不会影响运行时的行为，但可以被静态类型检查工具和IDE用来提供更好的代码分析和错误检测。 你定义函数时 def fun(a:int) 这里的a:int 就是类型提示 让我们来分解这个类型提示的含义： […]: 这个省略号 … 表示可接受任意数量的参数，即函数或方法可以接受任意数量的参数，包括零个参数。 Any: 这个关键字表示函数或方法可以返回任意类型的值。 综合起来，_call_ : Callable[…, Any] 表示这个类型可以是一个接受任意数量参数的可调用对象，并且可以返回任意类型的值。在类型提示中，这种方式用于表达灵活的函数签名，特别是当函数可能具有不固定参数数量或不确定返回类型时。 而后面的 = _wrapped_call_impl 相当于给这个_call_()方法取了一个别名， 接下来我们去找这个方法，源码如下： 12345def _wrapped_call_impl(self, *args, **kwargs): if self._compiled_call_impl is not None: return self._compiled_call_impl(*args, **kwargs) # type: ignore[misc] else: return self._call_impl(*args, **kwargs) 可以看到这里根据对象实例中的 _compiled_call_impl 属性是否不为 None执行不同的方法， 当_compiled_call_impl 不为None时，执行self._compiled_call_impl(*args, **kwargs) 否则执行self._call_impl(*args, **kwargs) 观看源码，可以发现一般情况下，_compiled_call_impl 都是None的，除非你调用了Module里的compile方法， 12345678910def compile(self, *args, **kwargs): &quot;&quot;&quot; Compile this Module&#x27;s forward using :func:`torch.compile`. This Module&#x27;s `__call__` method is compiled and all arguments are passed as-is to :func:`torch.compile`. See :func:`torch.compile` for details on the arguments for this function. &quot;&quot;&quot; self._compiled_call_impl = torch.compile(self._call_impl, *args, **kwargs) 根据源码的注释，可以看到这段代码的使用torch.compile编译模块的_call()方法，其效果是将当前模块的 _call 方法进行了编译或者优化，并将优化后的实现保存在 _compiled_call_impl 属性中。编译后的实现可以提升执行效率或者改进其他方面的性能，具体取决于 torch.compile 函数的实现和参数设置。 如果你未调用过该compile方法，那么_wrapped_call_impl()接下来就会执行_call_impl(), _call_impl()源码如下： 12345678910111213def _call_impl(self, *args, **kwargs): forward_call = (self._slow_forward if torch._C._get_tracing_state() else self.forward) # If we don&#x27;t have any hooks, we want to skip the rest of the logic in # this function, and just call forward. if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_pre_hooks or _global_backward_hooks or _global_forward_hooks or _global_forward_pre_hooks): return forward_call(*args, **kwargs) try: result = None ...后面的太长省略 可以看到，分析forward_call &#x3D; (self._slow_forward if torch._C._get_tracing_state() else self.forward) torch._C._get_tracing_state() 函数用来检查当前是否处于追踪状态（tracing state）。如果处于追踪状态，说明在进行模型的图形化表示（例如在 TorchScript 中），此时使用 _slow_forward 方法。 否则使用 self.forward 方法。 后面的代码 1234if not (self._backward_hooks or self._backward_pre_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_pre_hooks or _global_backward_hooks or _global_forward_hooks or _global_forward_pre_hooks): return forward_call(*args, **kwargs) 意思是：如果当前模块没有任何的钩子（hooks），则跳过此方法中的其他逻辑，直接调用 forward_call 方法并返回其结果。钩子（hooks）通常用于在模型运行过程中添加额外的操作或者记录信息，例如日志、梯度信息等。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"https://shuaibisheng666.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"pytorch","slug":"深度学习/pytorch","permalink":"https://shuaibisheng666.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/pytorch/"}],"tags":[{"name":"pytorch","slug":"pytorch","permalink":"https://shuaibisheng666.github.io/tags/pytorch/"}],"author":"Jiasheng Ma"},{"title":"QT添加MQTT模块","slug":"QT添加mqtt模块","date":"2024-02-17T07:17:45.000Z","updated":"2024-02-17T09:43:15.100Z","comments":true,"path":"2024/02/17/QT添加mqtt模块/","link":"","permalink":"https://shuaibisheng666.github.io/2024/02/17/QT%E6%B7%BB%E5%8A%A0mqtt%E6%A8%A1%E5%9D%97/","excerpt":"","text":"一. 首先确保已经安装好QT1. QT官网：https://www.qt.io/zh-cn/ 2. 根据需求选择版本安装包 3. 注册登录账号 4. 选择好安装路径 6. 选择好需要的开发组件，比如windows桌面就MingGw，android就选Android 二. 下载QT在github发布的MQTT源码1. 源码地址：https://github.com/qt/qtmqtt，需要确保在其分支中下载与本地QT版本对应的代码版本 2. 打开工程：在QT中选择打开项目，然后选择源码中的CmakeList.txt即可打开工程 三. 编译源码1. 选择构建组件：选择好自己的构建组件，如果需求是想要在windows桌面下开发，则一般选择MingGW Desktop， 如果是想开发一个android app，则选择android。 2. 开始编译：点击build（构建） 3. 构建完成并且没有错误的情况下，在源码同级目录会生成一个文件夹，编译输出文件都在里面 四，导入模块1. 打开输出文件，里面有五个文件夹的文件是需要用到的，分别是bin,include, lib, modules, mkspecs 2. 打开自己QT的安装文件夹，找到编译mqtt源码用到的组件的目录，比如我的是D:\\software\\Qt\\6.8.0\\mingw_64， 你会发现这里面同样存在这五个文件夹，接下来我们只需要将编译源码得到的文件依次正确复制到QT的安装目录中即可 3. 首先将编译源码得到的bin里的文件复制到mingw_64\\bin里面 4. 将编译源码得到的include里的文件复制到mingw_64\\include里面 5. 将编译源码得到的lib里的.a 和 .prl后缀的文件复制到mingw_64\\lib里面 6. 将编译源码得到的modules里的.json文件复制到mingw_64\\mudules里面 7. 将编译源码得到的mkspecs里的mudules文件夹整个复制到mingw_64\\mkspecs 五. 验证导入模块是否成功1. 按照前面编译源码的方法，打开下载的mqtt源码下的examples/mqtt，选择simpleclient,编译运行，如果成功会显示一个界面。 2. 接下来如果你的项目需要用到mqtt，直接在配置文件里加上 QT += mqtt即可","categories":[{"name":"development","slug":"development","permalink":"https://shuaibisheng666.github.io/categories/development/"}],"tags":[{"name":"QT","slug":"QT","permalink":"https://shuaibisheng666.github.io/tags/QT/"},{"name":"MQTT","slug":"MQTT","permalink":"https://shuaibisheng666.github.io/tags/MQTT/"}]},{"title":"git使用教程","slug":"git使用教程","date":"2024-01-20T06:21:59.000Z","updated":"2024-01-20T09:39:59.359Z","comments":true,"path":"2024/01/20/git使用教程/","link":"","permalink":"https://shuaibisheng666.github.io/2024/01/20/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","excerpt":"","text":"一. git简介 git实际上就是个代码管理工具，可以帮助你管理代码，比如你想开发一个功能，后面遇到障碍了，想重来，就需要你一开始就进行代码备份，但有git就可以直接将代码回退到之前的版本，或者你与其他人协同开发，你们互相之间必须清楚对方对代码做了什么，这个时候就需要有代码管理工具对你们的修改进行记录。 其余代码管理工具还有SVN等，但基本都被淘汰，现在基本都是用git，因为git是分布式的，每个人的主机都可以是一个代码仓库，不同仓库直接可以互通修改。 二. git安装配置 直接官网下载安装，一直默认下一步即可 初始化配置：鼠标右键git bash here，输入：12git config --global user.name &quot;name&quot;git config --global user.email &quot;email&quot; 其中name和email随意，email设置是不存在的都可以 三. 基本命令 git init 初始化一个本地仓库，新建一个文件夹，然后进入右键git bash here，输入git init git add 将工作区文件添加进暂存区，修改完代码后需要将文件添加进暂存区 git commit -m &quot;注释&quot; 将暂存区文件提交到仓库，表明这是一个正式的版本，注释表明你的提交做了哪些修改 git log 输出各个版本信息 git reset --hard commitID回退到某个版本，commitID可以通过git log查看 git reflog这个指令可以看到已经删除的提交记录 四. 添加忽略配置文件 有时候我们需要git忽略一些文件不对其进行管理，比如一些说明文件，pdf啥的，可以通过以下方式实现： 新建文件.gitignore 在.gitignore中添加文件名，可以使用通配符等 commit提交.gitignore到仓库 五. git 分支有时候在进行功能开发时，可能需要开发多个功能，不使用代码管理工具，同时开发新功能时就可能造成两个功能互相影响，使用代码管理工具，通过使用分支可以使功能开发同时进行，等两个功能都开发完毕后，就可以将两个分支合并，假如其中一个分支功能开发失败了，直接将分支删除即可，不会影响另一个分支功能。 git branch &quot;branch_name&quot; 新建一个分支 git checkout &quot;branch_name&quot; 切换分支 git merge &quot;branch_name&quot; 将分支与当前所处分支合并 git branch -d &quot;branch_name&quot; 删除分支 分支就好比影分身之术，写代码就好比你现在在攻略一张地图，开发新功能就好比你想往未知领域探索，于是你在某一刻创建了一个分身，此时你的意识可以在分身之间切换，git log有个head-&gt;master表示你处于master分支，head就好比你的意识，你的意识切换到哪个分身，你就可以控制那个分身行动，往前探索，假如区域探索完毕（功能开发完毕），就和另一个分身合并，假如分身遭受危险，被怪物击败，只要将那个分身删除，切换另一个分身继续探索即可。 六. 远程仓库假如你想与其他人协同开发，或者你想将自己的代码开源，就可以使用远程仓库。远程仓库相当于一个第三方服务器，你可以将代码放在他那边，常见的远程git仓库有github，gitee 注册github或gitee账号，创建一个远程仓库 创建ssh公钥连接 (1) 本地git bash输入 ssh-keygen -t rsa 一路回车 表示生成一个公钥对 (2) 本地git bash输入 cat ~/.ssh/id_rsa.pub 复制公钥然后粘贴添加至github或gitee个人设置公钥中 (3) 本地git bash输入ssh -T git@gitee.com 表示与远程服务器创立连接 (4) 本地git bash 输入 git remote add 远程仓库名 “仓库地址” 表示添加远程仓库，并给其取名，地址可以在创建的仓库中查看 git clone &quot;仓库地址&quot; 表示将远程的仓库代码复制到本地,一般只在创建本地仓库时使用一次，后续想跟踪远程仓库的代码修改情况只需要 git fetch 远程仓库名 分支名 将远程仓库的分支抓取到本地，但不进行合并 git pull 远程仓库名 分支名 将远程仓库的分支抓取到本地，再进行merge合并 git push 远程仓库名 本地分支名:远程分支名 表示将本地分支推送到远程仓库的分支将二者合并，注意push时可能会产生冲突，假如你与他人协同开发，其他人已经先修改某行代码并先push了，你也修改了那行代码，则可能尝试冲突，所以push前一般需要先pull拉取修改情况，如果本地产生冲突，再在本地解决冲突再提交。","categories":[{"name":"development","slug":"development","permalink":"https://shuaibisheng666.github.io/categories/development/"}],"tags":[{"name":"git","slug":"git","permalink":"https://shuaibisheng666.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://shuaibisheng666.github.io/tags/github/"},{"name":"gitee","slug":"gitee","permalink":"https://shuaibisheng666.github.io/tags/gitee/"}],"author":"Jiasheng Ma"},{"title":"考研高等数学:快速计算函数的不可导点个数","slug":"考研高等数学-快速计算函数的不可导点个数","date":"2023-09-01T05:00:00.000Z","updated":"2023-09-01T08:51:00.427Z","comments":true,"path":"2023/09/01/考研高等数学-快速计算函数的不可导点个数/","link":"","permalink":"https://shuaibisheng666.github.io/2023/09/01/%E8%80%83%E7%A0%94%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E5%BF%AB%E9%80%9F%E8%AE%A1%E7%AE%97%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%AF%BC%E7%82%B9%E4%B8%AA%E6%95%B0/","excerpt":"","text":"","categories":[{"name":"考研","slug":"考研","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"高等数学","slug":"考研/高等数学","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"},{"name":"导数与微分","slug":"考研/高等数学/导数与微分","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/"}],"tags":[{"name":"高等数学","slug":"高等数学","permalink":"https://shuaibisheng666.github.io/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"},{"name":"不可导点","slug":"不可导点","permalink":"https://shuaibisheng666.github.io/tags/%E4%B8%8D%E5%8F%AF%E5%AF%BC%E7%82%B9/"}]},{"title":"考研高等数学:反常积分的省敛法","slug":"考研高等数学-反常积分的省敛法","date":"2023-08-31T17:00:00.000Z","updated":"2023-08-31T16:42:10.389Z","comments":true,"path":"2023/09/01/考研高等数学-反常积分的省敛法/","link":"","permalink":"https://shuaibisheng666.github.io/2023/09/01/%E8%80%83%E7%A0%94%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86%E7%9A%84%E7%9C%81%E6%95%9B%E6%B3%95/","excerpt":"","text":"","categories":[{"name":"考研","slug":"考研","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"高等数学","slug":"考研/高等数学","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"},{"name":"积分","slug":"考研/高等数学/积分","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E7%A7%AF%E5%88%86/"},{"name":"反常积分","slug":"考研/高等数学/积分/反常积分","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E7%A7%AF%E5%88%86/%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/"}],"tags":[{"name":"高等数学","slug":"高等数学","permalink":"https://shuaibisheng666.github.io/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"},{"name":"反常积分","slug":"反常积分","permalink":"https://shuaibisheng666.github.io/tags/%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/"},{"name":"省敛法","slug":"省敛法","permalink":"https://shuaibisheng666.github.io/tags/%E7%9C%81%E6%95%9B%E6%B3%95/"}]},{"title":"考研线性代数:求矩阵A的n次方","slug":"考研线性代数-求矩阵A的n次方","date":"2023-08-31T06:00:00.000Z","updated":"2023-08-31T06:58:58.623Z","comments":true,"path":"2023/08/31/考研线性代数-求矩阵A的n次方/","link":"","permalink":"https://shuaibisheng666.github.io/2023/08/31/%E8%80%83%E7%A0%94%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E6%B1%82%E7%9F%A9%E9%98%B5A%E7%9A%84n%E6%AC%A1%E6%96%B9/","excerpt":"","text":"","categories":[{"name":"考研","slug":"考研","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"线性代数","slug":"考研/线性代数","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"}],"tags":[{"name":"线性代数","slug":"线性代数","permalink":"https://shuaibisheng666.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"矩阵","slug":"矩阵","permalink":"https://shuaibisheng666.github.io/tags/%E7%9F%A9%E9%98%B5/"}]},{"title":"动态规划","slug":"动态规划","date":"2023-04-01T07:28:45.000Z","updated":"2024-07-07T15:45:14.068Z","comments":true,"path":"2023/04/01/动态规划/","link":"","permalink":"https://shuaibisheng666.github.io/2023/04/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","excerpt":"","text":"一.简介 动态规划（Dynamic Programming）是求解决策过程最优化的过程。它通过把原问题拆解成若干子问题，并保存子问题的结果以便重复利用，从而避免了重复计算，达到优化的目的。动态规划通常用于有重叠的子问题和最优子结构性质的优化问题。 动态规划可以解决很多经典的问题，如背包问题、找零钱问题、最长公共子序列问题等等。 但是，动态规划也有一些缺点，例如时间和空间复杂度高，难以处理连续区间问题等。因此，在使用动态规划时，需要衡量问题的特征和时间、空间复杂度的代价。 二. 基本逻辑（步骤） 定义状态：将原问题拆解成若干子问题，定义状态表示这些子问题的解。 定义状态转移方程：根据子问题之间的关系，定义状态转移方程，以递推的形式计算子问题的解。 确定边界条件：确定状态转移方程的边界条件，即基本问题的解。 自底向上计算：按照递推式自底向上计算状态，得到原问题的解。 三. 模板动态规划的关键在于列出状态转移方程，具体的状态转移方程随实际问题不同，一旦列出状态转移方程则问题就基本解决了。 如对于斐波那契数列，其状态转移方程为： 1234567891011121314151617###################################### f(1) = 1 f(2) = 1 f(n) = f(n-1) + f(n-2)######################################### #伪代码实现： function fibonacci(n) if n &lt;= 1 return n end if fib = array of length n+1 fib[0] = 0, fib[1] = 1 for i from 2 to n fib[i] = fib[i-1] + fib[i-2] end for return fib[n] end function 四. 示例以下是Leetcode第70题 爬楼梯 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 示例 1： 输入：n &#x3D; 2输出：2解释：有两种方法可以爬到楼顶。 1 阶 + 1 阶 2 阶 123456789101112131415####################思路############################# 假设dp(n)代表爬到第n阶的方法数# 显然dp(n) = dp(n-1) + dp(n-2)# 因为第n阶只能由第n-1阶向上跳一阶或第n-2阶向上跳2阶# 又显然dp(1) = 1 dp(2) = 2########################################################################代码############################ def climbStairs(n: int) -&gt; int: if n == 1: return 1 if n == 2: return 2 else: return climbStairs(n-1) + climbStairs(n-2)","categories":[{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"最优化算法","slug":"算法/最优化算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/%E6%9C%80%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://shuaibisheng666.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"优化算法","slug":"优化算法","permalink":"https://shuaibisheng666.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"}]},{"title":"广度优先搜索","slug":"广度优先搜索","date":"2023-03-31T13:00:00.000Z","updated":"2024-07-06T15:41:59.945Z","comments":true,"path":"2023/03/31/广度优先搜索/","link":"","permalink":"https://shuaibisheng666.github.io/2023/03/31/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","excerpt":"","text":"一. 简介 广度优先搜索（Breadth-First Search，BFS）是一种图搜索算法，其基本思想是从起始节点开始逐层扩展，先访问离起始节点近的节点，然后扩展到距离更远的节点，直到遍历完所有可达的节点。在BFS中，使用队列数据结构来保存待访问节点，使得所有按照广度遍历到的节点都会先于深度贝遍历到的节点被访问。 二. 基本逻辑（步骤）广度优先搜索的主要步骤如下 选择一个起始节点，并标志为已访问； 将起始节点加入队列； 从队列中取出一个节点，并访问它的未被访问的邻居节点，将这些邻居节点标记为已访问，并加入到队列中； 重复步骤3，直到队列为空。 需要注意的是，在进行BFS时，同样需要记录已经访问过的节点，以避免重复遍历同一节点。 BFS算法的时间复杂度为O(|V|+|E|)，其中|V|和|E|分别表示图中节点数和边数，空间复杂度则为O(|V|)，因为需要存储队列和已访问节点标志。BFS广泛应用于社交网络分析、路径规划、迷宫等方面。 三. 基本模板(伪代码) 如果不需要确定当前遍历到了哪一层，BFS 模板如下。 12345while queue 不空： cur = queue.pop() for 节点 in cur的所有相邻节点： if 该节点有效且未访问过： queue.push(该节点) 如果要确定当前遍历到了哪一层，BFS 模板如下。 这里增加了 level 表示当前遍历到二叉树中的哪一层了，也可以理解为在一个图中，现在已经走了多少步了。size 表示在当前遍历层有多少个元素，也就是队列中的元素数，我们把这些元素一次性遍历完，即把当前层的所有元素都向外走了一步。 12345678910level = 0while queue 不空： size = queue.size() while (size --) &#123; cur = queue.pop() for 节点 in cur的所有相邻节点： if 该节点有效且未被访问过： queue.push(该节点) &#125; level += 1 四. 示例这是Leetcode第994题： 994. 腐烂的橘子 在给定的 m x n 网格 grid 中，每个单元格可以有以下三个值之一： 值 0 代表空单元格； 值 1 代表新鲜橘子； 值 2 代表腐烂的橘子。 每分钟，腐烂的橘子 周围 4 个方向上相邻 的新鲜橘子都会腐烂。 返回 直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1 。 示例代码： 1234567891011121314151617181920212223242526272829303132333435363738394041####################思路############################# 将每个腐烂的橘子入队# 对每个腐烂的橘子进行广度优先搜索# 记录每次广度优先搜索的层级########################################################################代码############################ class Solution: def orangesRotting(self, grid: List[List[int]]) -&gt; int: m,n = len(grid),len(grid[0]) queue = collections.deque([]) for i in range(m): for j in range(n): if grid[i][j] == 2: queue.append((i,j)) #下面这一段就是广度优先搜索的主体################## dire = [(1,0),(-1,0),(0,1),(0,-1)] step = -1 while queue: step+=1 size = len(queue) for i in range(size): current = queue.popleft() for i in dire: #以下一长串是判断是否坐标出界或已访问的 if current[0]+i[0] &lt; 0 or current[0]+i[0]&gt;=m or current[1]+i[1]&lt;0 or current[1]+i[1] &gt;= n or grid[current[0]+i[0]][current[1]+i[1]]==0 or grid[current[0]+i[0]][current[1]+i[1]]==2: continue else: grid[current[0]+i[0]][current[1]+i[1]] = 2 queue.append((current[0]+i[0],current[1]+i[1])) #################################################### for i in range(m): for j in range(n): if grid[i][j] == 1: return -1 if step == -1: return 0 else: return step","categories":[{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"搜索算法","slug":"算法/搜索算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"搜索算法","slug":"搜索算法","permalink":"https://shuaibisheng666.github.io/tags/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"}]},{"title":"深度优先搜索","slug":"深度优先搜索","date":"2023-03-31T11:43:03.000Z","updated":"2023-04-01T07:28:23.814Z","comments":true,"path":"2023/03/31/深度优先搜索/","link":"","permalink":"https://shuaibisheng666.github.io/2023/03/31/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","excerpt":"","text":"一. 简介 深度优先搜索是一种图遍历算法。深度优先搜索（DFS）是用于遍历或搜索树或图的一种算法。它沿着树的深度遍历树的节点，并尽可能深入搜索树的分支。当一个节点的所有子节点都被探索过，搜索过程将回溯到该节点的起始点，继续搜索下一个未被探索的节点。 二. 基本逻辑（步骤）深度优先搜索的主要步骤如下 选择一个起始节点，并标记为已访问； 访问当前节点的邻居节点，如果邻居节点没有被访问过，就将其标记为已访问，并递归遍历邻居节点； 当当前节点没有未访问的邻居节点时，回溯到上一层节点； 重复2和3步骤，直到遍历完所有的节点。 在实现深度优先搜索时，通常使用栈结构来保存待访问节点，使算法能够回溯回到之前的状态。这种实现方式称为迭代式深度优先搜索（Iterative Deepening Depth-First Search，IDDFS），它是深度优先搜索的一个变体。 需要注意的是，深度优先搜索对于环路很容易陷入死循环，因此需要在遍历时记录已访问的节点信息，防止重复访问同一个节点。 鉴于深度优先搜索的特性，通常用递归实现。 三. 基本模板(伪代码)1234567891011def DFS(node) # 如果当前节点未访问则标记为已访问 if node.visited == false then mark node as visited # 将每个邻居依次设为搜索起点 for each neighbor in node.neighbors do DFS(neighbor)# 初始化每个节点为未访问过状态initialize visited flag for all nodes to falseDFS(start_node) 四. 示例这是Leetcode第695题： 695. 岛屿的最大面积 给你一个大小为 m x n 的二进制矩阵 grid 。 岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。 岛屿的面积是岛上值为 1 的单元格的数目。 计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839####################思路############################# 对每个孤立的岛屿进行深度优先搜索# 记录每次深度优先搜索的岛屿的面积# 维护一个记录最大面积的变量########################################################################代码############################ class Solution: def maxAreaOfIsland(self, grid: List[List[int]]) -&gt; int: # 用来存储坐标是否访问过的矩阵 grid_copy = [[0 for i in range(len(grid[0]))] for _ in range(len(grid))] def dfs(i,j): nonlocal area # 如果坐标不合法或已访问则直接返回 if i&gt;=len(grid) or i&lt;0: return if j&gt;=len(grid[0]) or j&lt;0: return if grid[i][j] == 0 or grid_copy[i][j]==2: return #如果符合条件则岛屿面积加一并依次搜索上下左右四个邻居 area += 1 grid_copy[i][j]=2 dire = [(1,0),(-1,0),(0,1),(0,-1)] for k in dire: dfs(i+k[0],j+k[1]) res = 0 for i in range(len(grid)): for j in range(len(grid[0])): #遍历每个孤立的岛屿 if grid[i][j] == 1 and grid_copy != 2: area = 0 dfs(i,j) res = max(res,area) return res","categories":[{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"搜索算法","slug":"算法/搜索算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"搜索算法","slug":"搜索算法","permalink":"https://shuaibisheng666.github.io/tags/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"}]},{"title":"esp移植LVGL","slug":"esp-移植lvgl","date":"2022-11-07T13:36:32.000Z","updated":"2023-03-31T11:54:22.410Z","comments":true,"path":"2022/11/07/esp-移植lvgl/","link":"","permalink":"https://shuaibisheng666.github.io/2022/11/07/esp-%E7%A7%BB%E6%A4%8Dlvgl/","excerpt":"","text":"一. LVGL简介 LVGL (Light and Versatile Graphics Library) is a free and open-source graphics library providing everything you need to create an embedded GUI with easy-to-use graphical elements, beautiful visual effects and a low memory footprint. 以上是官方文档对LVGL（轻量的多功能的图形库）的介绍，简单说就是一个轻量，开源，免费的图形库，能让你很方便地做出漂亮的GUI。 LVGL支持很多MCU和屏幕驱动，具体介绍建议查看LVGL官方文档，这里就不赘述了。 LVGL官方文档 二. 环境 硬件： tft显示屏 esp开发板(由于我手头只有nodemcu，故此次以nodemcu为例) 软件 vscode + platformio(也可以是arduino) 三. TFT屏幕显示 屏幕显示部分前面已发过教程，不懂的去观看前面的博客，这里就不赘述了。 四. LVGL移植 在platformio中新建工程，根据自己需要选择开发板和开发框架，比如我选择的是nodemcu1.0和arduino 在libraries中搜索lvgl并添加到工程,如果以后经常用到的话可以待添加成功后将lvgl文件夹整个复制到platformio的全局库路径中 由platformio添加到工程的库的路径为.pio&#x2F;libdeps&#x2F;(board_name)&#x2F;，将lvgl中的lv_conf_template.h复制并粘贴到lvgl的同级目录中，并改名为lv_conf.h 打开lv_conf.h根据自己的需要进行修改 一般来说修改颜色深度和内存空间即可，如以下修改颜色深度为16 123456/*====================COLOR SETTINGS*====================*//*Color depth: 1 (1 byte per pixel), 8 (RGB332), 16 (RGB565), 32 (ARGB8888)*/#define LV_COLOR_DEPTH 16 五. lvgl初始化介绍 在写代码之前首先要了解lvgl的初始化过程（来源于官网教程） 先初始化一个内存缓冲区(lv_disp_draw_buf_t) 123456789/*A static or global variable to store the buffers*/static lv_disp_draw_buf_t disp_buf;/*Static or global buffer(s). The second buffer is optional*/static lv_color_t buf_1[MY_DISP_HOR_RES * 10];static lv_color_t buf_2[MY_DISP_HOR_RES * 10];/*Initialize `disp_buf` with the buffer(s). With only one buffer use NULL instead buf_2 */lv_disp_draw_buf_init(&amp;disp_buf, buf_1, buf_2, MY_DISP_HOR_RES*10); 初始化一个显示驱动 123456789static lv_disp_drv_t disp_drv; /*A variable to hold the drivers. Must be static or global.*/lv_disp_drv_init(&amp;disp_drv); /*Basic initialization*/disp_drv.draw_buf = &amp;disp_buf; /*Set an initialized buffer*/disp_drv.flush_cb = my_flush_cb; /*Set a flush callback to draw to the display*/disp_drv.hor_res = 320; /*Set the horizontal resolution in pixels*/disp_drv.ver_res = 240; /*Set the vertical resolution in pixels*/lv_disp_t * disp;disp = lv_disp_drv_register(&amp;disp_drv); /*Register the driver and save the created display objects*/ 注意上面有一个disp_drv.flush_cb &#x3D; my_flush_cb,这里的my_flush_cb是一个回调函数，是为了实现lvgl调用绘制屏幕的接口，是需要我们自己实现的，比如我是这么实现的： 1234567891011121314/* Display flushing 回调函数，使lvgl可以使用tft接口*/ void my_disp_flush( lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p )&#123; uint32_t w = ( area-&gt;x2 - area-&gt;x1 + 1 ); uint32_t h = ( area-&gt;y2 - area-&gt;y1 + 1 ); tft.startWrite(); tft.setAddrWindow( area-&gt;x1, area-&gt;y1, w, h ); tft.pushColors( ( uint16_t * )&amp;color_p-&gt;full, w * h, true ); tft.endWrite(); //上面的代码就是使用tft的接口在指定矩形区域绘制图形（将指定数据输入指定显存） lv_disp_flush_ready( disp );&#125; 六. 写代码，编译下载 最终测试代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;lvgl.h&gt;#include &lt;TFT_eSPI.h&gt;static const uint16_t screenWidth = 128;static const uint16_t screenHeight = 128;static lv_disp_draw_buf_t draw_buf;static lv_color_t buf[ screenWidth * 10 ];TFT_eSPI tft = TFT_eSPI(screenWidth, screenHeight); /* TFT instance */#if LV_USE_LOG != 0/* Serial debugging */void my_print(const char * buf)&#123; Serial.printf(buf); Serial.flush();&#125;#endif/* Display flushing *///回调函数，使lvgl可以使用tft接口void my_disp_flush( lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p )&#123; uint32_t w = ( area-&gt;x2 - area-&gt;x1 + 1 ); uint32_t h = ( area-&gt;y2 - area-&gt;y1 + 1 ); tft.startWrite(); tft.setAddrWindow( area-&gt;x1, area-&gt;y1, w, h ); tft.pushColors( ( uint16_t * )&amp;color_p-&gt;full, w * h, true ); tft.endWrite(); //上面的代码就是使用tft的接口在指定矩形区域绘制图形（将指定数据输入指定显存） lv_disp_flush_ready( disp );&#125;void setup()&#123; Serial.begin( 115200 ); /* prepare for possible serial debug */ String LVGL_Arduino = &quot;Hello LVGL! &quot;; // LVGL_Arduino += String(&#x27;V&#x27;) + lv_version_major() + &quot;.&quot; + lv_version_minor() + &quot;.&quot; + lv_version_patch(); Serial.println( LVGL_Arduino ); Serial.println( &quot;I am LVGL_Arduino&quot; ); lv_init();#if LV_USE_LOG != 0 lv_log_register_print_cb( my_print ); /* register print function for debugging */#endif tft.begin(); /* TFT init */ tft.setRotation( 3 ); /* Landscape orientation, flipped */ lv_disp_draw_buf_init( &amp;draw_buf, buf, NULL, screenWidth * 10 ); /*Initialize the display*/ static lv_disp_drv_t disp_drv; //实例化一个显示驱动 lv_disp_drv_init( &amp;disp_drv ); //初始化 /*Change the following line to your display resolution*/ disp_drv.hor_res = screenWidth; //水平像素 disp_drv.ver_res = screenHeight; //垂直像素 disp_drv.flush_cb = my_disp_flush; //回调函数,实现将数据刷入屏幕 disp_drv.draw_buf = &amp;draw_buf; lv_disp_drv_register( &amp;disp_drv );#if 1 /* Create simple label */ lv_obj_t *label = lv_label_create( lv_scr_act() ); lv_label_set_text( label, LVGL_Arduino.c_str() ); lv_obj_align( label, LV_ALIGN_CENTER, 0, 0 );#endif Serial.println( &quot;Setup done&quot; );&#125;void loop()&#123; lv_timer_handler(); /* let the GUI do its work */ delay( 5 );&#125; 编译并下载 最终效果如下","categories":[{"name":"单片机","slug":"单片机","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"esp8266","slug":"单片机/esp8266","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/esp8266/"}],"tags":[{"name":"esp8266","slug":"esp8266","permalink":"https://shuaibisheng666.github.io/tags/esp8266/"},{"name":"tft显示屏","slug":"tft显示屏","permalink":"https://shuaibisheng666.github.io/tags/tft%E6%98%BE%E7%A4%BA%E5%B1%8F/"},{"name":"LVGL","slug":"LVGL","permalink":"https://shuaibisheng666.github.io/tags/LVGL/"}]},{"title":"从零开发操作系统（二）","slug":"从零开发操作系统（二）","date":"2022-11-05T15:39:02.000Z","updated":"2023-03-31T11:42:07.290Z","comments":true,"path":"2022/11/05/从零开发操作系统（二）/","link":"","permalink":"https://shuaibisheng666.github.io/2022/11/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"一. 环境搭建 接下来将进行最小操作系统的编写，在屏幕上显示Hello,OS World。 所需环境： Oracle virtual box(或vmware) ：虚拟机 Nasm ： 汇编编译 Notepad++ : 编辑器，也可以使用记事本 二. 制作虚拟磁盘 由于使用真实的电脑和磁盘来进行太麻烦了，于是我们选用虚拟磁盘和虚拟机的方式来实现。 打开cmd输入diskpart进入diskpart模式 在diskpart模式下输入 1DISKPART&gt; create vdisk file=f:\\myvdisk.vhd maximum=10 type=fixed 以上表示创建一个虚拟硬盘 ，大小为10M，大小固定。 三. 用汇编写启动程序 创建一个文件boot.asm 写入以下代码： 123456789101112131415161718 org 07c00h ; 告诉编译器程序加载到7c00处 mov ax, cs mov ds, ax mov es, ax call DispStr ; 调用显示字符串例程 jmp $ ; 无限循环DispStr: mov ax, BootMessage mov bp, ax ; ES:BP = 串地址 mov cx, 16 ; CX = 串长度 mov ax, 01301h ; AH = 13, AL = 01h mov bx, 000ch ; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮) mov dl, 0 int 10h ; 10h 号中断 retBootMessage: db &quot;Hello, OS world!&quot;times 510-($-$$) db 0 ; 填充剩下的空间，使生成的二进制代码恰好为512字节dw 0xaa55 ; 结束标志 编译生成二进制文件 1&gt; nasm boot.asm -o boot.bin 将二进制文件写入虚拟磁盘 在linux下可以使用dd命令实现，但windows下没有这个命令，可以去网上找dd.exe可执行程序或者其他方法，这里使用dd.exe操作。 1dd if=boot.bin of=f:\\myvdisk.vhd bs=512 count=1 以上命令将boot.bin写入myvdisk.vhd 四. virtual box里创建虚拟机 新建虚拟机，名称路径随意，最好不要有中文，类型和版本都选other，点击下一步 内存默认4M即可，点击下一步 选择使用已有的虚拟硬盘,然后将前面创建的虚拟磁盘注册进去，点击创建 五. 启动虚拟机 启动虚拟机，可以看到屏幕上显示红色的 Hello, OS World!","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://shuaibisheng666.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://shuaibisheng666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"汇编","slug":"汇编","permalink":"https://shuaibisheng666.github.io/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"从零开发操作系统（一）","slug":"从零开发操作系统（一）","date":"2022-11-05T15:38:54.000Z","updated":"2023-03-31T11:42:34.335Z","comments":true,"path":"2022/11/05/从零开发操作系统（一）/","link":"","permalink":"https://shuaibisheng666.github.io/2022/11/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"一. 计算机开机过程 在学习操作系统之前，我们得先知道计算机在启动到显示一个桌面这个过程都做了什么? 当计算机启动时，它会先执行BIOS，然后进行加电自检（POST），最后再从某一个盘中启动操作系统。 BIOS：即基本输入输出系统，BIOS是直接与硬件打交道的底层代码，它为操作系统提供了控制硬件设备的基本功能。BIOS一般被存放在ROM(只读存储芯片)之中，即使在关机或掉电以后，这些代码也不会消失。 POST：加电自检又称为引导自我检测（Power-OnSelf-Test；POST），是计算机BIOS的一个功能，在引导后会运行，针对计算机硬件如CPU、主板、存储器等进行检测，结果会显示在固件可以控制的输出接口，像显示屏、LED、打印机等等设备上。加电自检的检查速度极快，甚至感受不到它的存在。 二. 启动操作系统的规则 上面我们提到计算机在启动后执行一系列操作，最后再从启动盘（可以是软盘，硬盘，光盘）中加载操作系统。显然计算机要加载操作系统，那么这个操作系统必须要有特定的格式，不是任意一个盘里的数据都能当成操作系统启动的。 以软盘为例，如果计算机从软盘启动，那么计算机会开始检查软盘的0面0磁道1扇区（一共512个字节），如果发现它以0xAA55结尾的话，那么BIOS会认为它是一个引导扇区，也就是Boot Sector。 一旦BIOS发现Boot Sector，就会将这512B的内容装载到内存的0000：7c00除，然后跳转到0000：7c00处将控制权交给这段引导码。相当于进入了操作系统。 上面提到的0xAA55与0000:7c00不必知道由来，只要知道有这么个规则即可。 总结：上面我们介绍了计算机在加载操作系统前执行的操作以及加载操作系统的一些规则，下次将学习如何编写一个最小的操作系统以及在虚拟机上运行操作系统。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://shuaibisheng666.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://shuaibisheng666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"汇编","slug":"汇编","permalink":"https://shuaibisheng666.github.io/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"加法器原理","slug":"加法器原理","date":"2022-08-22T13:42:37.000Z","updated":"2023-03-31T11:50:07.583Z","comments":true,"path":"2022/08/22/加法器原理/","link":"","permalink":"https://shuaibisheng666.github.io/2022/08/22/%E5%8A%A0%E6%B3%95%E5%99%A8%E5%8E%9F%E7%90%86/","excerpt":"","text":"加法器原理一. 简介 加法器，顾名思意就是实现加法运算的一个装置，在计算机中，加法器是最基本的运算装置，因为在计算机中减法，乘法，除法都可以转化为加法。 加法器分为半加器和全加器，半加器指的是只包含两个加数作为输入，一个和数和一个进位作为输出，而全加器是在半加器的基础上加上了一个进位作为输入。 二. 实现原理1.半加器的实现 在计算机中，一切数据都是以二进制形式存储的，那么我们先考虑一下一位二进制数的加法运算。 观察以下式子： 0 + 0 &#x3D; 0 0 0 + 1 &#x3D; 0 1 1 + 0 &#x3D; 0 1 1 + 1 &#x3D; 1 0 可以看到对于一位二进制数的加法，有四个部分，一个加数，一个被加数，一个和数，一个进位数： 比如: 1（被加数） + 1（加数）&#x3D; 1（进位数）0（和数） 以下我们把被加数称为A，加数称为B，和数称为S,进位数称为C,将以上四条式子列为真值表 A B C S 0 0 0 0 0 1 0 1 1 0 0 1 1 1 1 0 可以看到： 只有A和B同时为1时，C才为1，这跟与运算是相同的，即： C &#x3D; A + B 当A和B一个为1一个为0时，S为1，也就是说A和B不一样时，S为1，这跟异或运算是一样的，即： S &#x3D; A ⊕ B 用以下逻辑符号表示为： 实际上我们并不关心内部装置是怎么样的，我们只要知道输入什么，会得到怎样的输出即可，于是我们对加法器进行抽象，变成以下简单的样子： 这样子，我们就得到了一个只能计算一位二进制数的加法器 2.全加器的实现 事实上，我们上面得到的加法器只有四个口，一个加数，一个被加数，一个和数，一个进位数，这样的加法器是不完善的，我们称之为半加器。 假设我们现在想实现一个加法器能够接收来自低位的进位，那么我们就需要第三个输入端，这样的加法器称为全加器。以下来自低位的进位称为C’,列出真值表： A B C’ C S 0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 这个真值表分析起来有点复杂，这里直接说结论，可以直接用两个半加器和一个或元件达成这个逻辑，即： 同样的，我们并不关心内部装置是怎么样的，我们只要知道输入什么，会得到怎样的输出即可，于是我们对这个全加法器进行抽象，变成以下简单的样子： 3. 多位二进制数加法的实现 上面我们虽然实现了半加器和全加器，但无论是半加器还是全加器，二者都只能计算一位二进制的加法。但是全加器可以接收来自低位的进位，因此我们可以将多个全加器串联起来，实现多位二进制数的加法。 如下我们把八个全加器串联起来，就能实现八位二进制数的加法运算了：注意最低为的进位输入端我们给它置零，因为其不会有接收来自低位进位的情况。 通过以上的分析，我们实现了一个八位二进制数的加法器，同样的如果我们将16个全加器串联起来，就可以计算十六位二进制数了。 虽然我们串联8个全加器可以计算八位二进制数的加法，但同样的计算时间也会变为8倍，但这对于人来说还是很快的，只要输入立马就能得到输出。不过也有其他的优化方法可以减少运算时间，此处不做讨论。","categories":[{"name":"数字逻辑","slug":"数字逻辑","permalink":"https://shuaibisheng666.github.io/categories/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"}],"tags":[{"name":"数字逻辑","slug":"数字逻辑","permalink":"https://shuaibisheng666.github.io/tags/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"},{"name":"微机原理","slug":"微机原理","permalink":"https://shuaibisheng666.github.io/tags/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"},{"name":"CPU","slug":"CPU","permalink":"https://shuaibisheng666.github.io/tags/CPU/"},{"name":"加法器","slug":"加法器","permalink":"https://shuaibisheng666.github.io/tags/%E5%8A%A0%E6%B3%95%E5%99%A8/"}]},{"title":"8266nodemcu+tft显示屏显示图片","slug":"8266nodemcu-tft显示屏显示图片","date":"2022-08-10T12:06:13.000Z","updated":"2024-07-06T15:42:22.694Z","comments":true,"path":"2022/08/10/8266nodemcu-tft显示屏显示图片/","link":"","permalink":"https://shuaibisheng666.github.io/2022/08/10/8266nodemcu-tft%E6%98%BE%E7%A4%BA%E5%B1%8F%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/","excerpt":"","text":"8266nodemcu+tft显示屏显示图片一. 开发环境 vscode + platformio 硬件: nodemcu，TFT显示屏 二. 开发前准备 引脚连接 TFT ESP8266 DI(MOSI) D7 SC(SCLK.SCK) D5 CS D8 RST D4、RST RS(DC、A0) D3 BLK&amp;VCC 3.3V GND GND 创建工程并添加库 在platformio中的library里搜索TFT_eSPI并添加到工程，如果以后经常用到的话可以等库添加完后手动复制到platformio的全局库路径中。 修改设置打开TFT_eSPI里的User_Setup.h文件，对里面的一些宏定义进行修改，比如我的TFT是ST7735芯片驱动，我就需要将相关宏定义打开，并将其他宏定义注释掉 12345//#define ILI9341_DRIVER // Generic driver for common displays//#define ILI9341_2_DRIVER // Alternative ILI9341 driver, see https://github.com/Bodmer/TFT_eSPI/issues/1172#define ST7735_DRIVER // Define additional parameters below for this display//#define ILI9163_DRIVER // Define additional parameters below for this display//#define S6D02A1_DRIVER 一般来说要修改的除了驱动，还有以下几处(具体根据个人情况修改)： RGB数据格式： 12// #define TFT_RGB_ORDER TFT_RGB // Colour order Red-Green-Blue#define TFT_RGB_ORDER TFT_BGR // Colour order Blue-Green-Red 屏幕像素 1234567// For ST7789, ST7735, ILI9163 and GC9A01 ONLY, define the pixel width and height in portrait orientation// #define TFT_WIDTH 80#define TFT_WIDTH 128// #define TFT_WIDTH 172 // ST7789 172 x 320// #define TFT_WIDTH 240 // ST7789 240 x 240 and 240 x 320// #define TFT_HEIGHT 160#define TFT_HEIGHT 128 引脚配置一般默认即可 字库配置一般默认即可 SPI通信速率一般默认即可 配置完成后先烧录一段简单的程序查看是否能正常运行12345678910111213141516171819202122#include &lt;SPI.h&gt;#include &lt;TFT_eSPI.h&gt;TFT_eSPI tft = TFT_eSPI(); void setup() &#123; Serial.begin(115200); tft.begin(); tft.setRotation(0); tft.fillScreen(TFT_BLACK);&#125;void loop()&#123; tft.fillScreen(TFT_GREEN); delay(1000); tft.fillScreen(TFT_BLUE); delay(1000); tft.fillScreen(TFT_RED); delay(1000);&#125; 三. 制作图片数据 使用位图生成工具即可将图片转换成特定格式的数据，此处以Img2Lcd工具作为示例 使用工具打开一张图片，修改设置，并将其输出为.h文件输出选择C语言数组，颜色选择16位真彩色，最大宽度和高度根据自己屏幕尺寸设置，颜色排列要跟前面配置User_Setup中的颜色排列一致，还有注意输出图像的尺寸，后面显示图片要使用这个数据。 保存输出后的图像数据，将其改为.h文件,并稍作修改，如下：修改前 1const unsigned char gImage_demo_image1[115200] = &#123; /* 0X10,0X10,0X00,0XF0,0X00,0XF0,0X01,0X1B, */ 修改后 1234#ifndef PROGMEM#define PROGMEM#endifconst uint8_t gImage_demo_image1[115200] PROGMEM = &#123; /* 0X10,0X10,0X00,0XF0,0X00,0XF0,0X01,0X1B, */ 其中的PROGMEM关键字是为了防止图片数组过大RAM空间不足，将数据存放入FLASH中 将包含图片数据的.h文件复制进工程中 四. 编写程序 以下是程序示例: 123456789101112131415161718#include &lt;Arduino.h&gt;#include &lt;TFT_eSPI.h&gt;#include &lt;SPI.h&gt;#include &lt;avr/pgmspace.h&gt; //为了使用PROGMEM关键字#include &quot;map.h&quot; //图片数据头文件TFT_eSPI tft = TFT_eSPI();void setup()&#123;tft.begin();tft.setRotation(0);tft.fillScreen(TFT_BLACK);tft.pushImage(0,0,128,128,(uint16_t *)gImage_map);&#125;void loop()&#123;&#125; 其中的pushImage是将FLASH中的16位图片显示出来，第一二个参数是图片起始点，第三四个参数是图片宽和高，注意图片宽高正确，否则可能会显示错误 编译并烧录 查看运行结果","categories":[{"name":"单片机","slug":"单片机","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"esp8266","slug":"单片机/esp8266","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/esp8266/"}],"tags":[{"name":"esp8266","slug":"esp8266","permalink":"https://shuaibisheng666.github.io/tags/esp8266/"},{"name":"tft显示屏","slug":"tft显示屏","permalink":"https://shuaibisheng666.github.io/tags/tft%E6%98%BE%E7%A4%BA%E5%B1%8F/"}],"author":"Jiasheng Ma"},{"title":"stm32cube+platformio环境开发","slug":"stm32cube+platformio环境开发","date":"2022-08-08T13:08:51.000Z","updated":"2024-07-06T15:42:53.209Z","comments":true,"path":"2022/08/08/stm32cube+platformio环境开发/","link":"","permalink":"https://shuaibisheng666.github.io/2022/08/08/stm32cube+platformio%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91/","excerpt":"","text":"stm32cube+platformio环境开发一. 所需软件 VScode 下载过程略 vscode官网 建议国内下载 stm32cubemx 下载过程略 st官网 建议国内下载 platformio 下载好vscode后，直接在左边插件搜索，选择下载量最多的即可，由于是从github下载故下载速度很慢(dddd) 下载好后点击左侧图标即可进入界面 二. stm32cubemx创建工程 打开stm32cubemx，点击file-&gt;new project,期间可能会更新一些芯片包，如不需要可直接点击cancel,然后选择自己的芯片 进行一些基本的配置并创建项目 打开系统总线 启用外部晶振 进行自己需要的一些配置，如我此处初始化PA1为output 配置时钟树，直接输入72即可 配置项目基本信息 创建项目 三. platformio创建工程 打开paltformio创建项目工程 点击new project 选择对应的芯片 framworks选择cubemax 注意：项目名称和路径都要和cubemx创建的对应 开始创建 由于是第一次创建项目，platformio需要从github上下载对应的资源，因此速度非常慢，忍受不了的可以想办法加速（dddd） 创建成功后，修改platformio.ini配置文件,可以根据自己具体情况进行修改 编译并下载 其中勾号是编译，箭头是下载","categories":[{"name":"单片机","slug":"单片机","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"stm32","slug":"单片机/stm32","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/stm32/"}],"tags":[{"name":"stm32","slug":"stm32","permalink":"https://shuaibisheng666.github.io/tags/stm32/"},{"name":"hal库","slug":"hal库","permalink":"https://shuaibisheng666.github.io/tags/hal%E5%BA%93/"},{"name":"platformio","slug":"platformio","permalink":"https://shuaibisheng666.github.io/tags/platformio/"},{"name":"vscode","slug":"vscode","permalink":"https://shuaibisheng666.github.io/tags/vscode/"}],"author":"Jiasheng Ma"},{"title":"个人博客搭建教程","slug":"个人博客搭建教程","date":"2022-08-07T09:21:14.000Z","updated":"2023-08-31T16:36:58.156Z","comments":true,"path":"2022/08/07/个人博客搭建教程/","link":"","permalink":"https://shuaibisheng666.github.io/2022/08/07/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/","excerpt":"","text":"个人博客搭建一. 安装所需的软件 npm npm是随同node.js一起安装的包管理工具,能解决NodeJS代码部署上的很多问题 node.js Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I&#x2F;O 的模型,使其轻量又高效。 Node.js 的包管理器 npm,是全球最大的开源库生态系统。 git Git是一个开源的分布式版本控制系统,可以有效、高速地处理从很小到非常大的项目版本管理 git官网 hexo 一款简洁高效的个人博客搭建框架 hexo官网 hexo中文文档 检测是否安装成功 1234$ npm -v$ git --version$ node -v$ hexo -v 二. 初始化 新建一个文件夹(如：MyBlog) 进入文件夹，右键选择git bash here 输入命令 1$ hexo init 可以看到文件里生成了许多文件 输入 12$ hexo g #生成静态网页文件(生成文件夹public)$ hexo s #开启服务 在浏览器输入localhost:4000&#x2F;即可看到hello word网页 三. 更改主题 进入主题网站查看自己喜欢的主题 点击喜欢的主题进入对应的github。 根据里面的readme进行下载，可以用git命令下载，也可以直接下载压缩包解压，注意主题文件要放入MyBlog&#x2F;theme文件夹中。 然后在MyBlog&#x2F;_config.yml中找到theme: 将后面改为与你下载的主题文件夹同名，注意 : 后面要有一个空格。 在git bash中输入命令 12$ hexo clean &amp;&amp; hexo g$ hexo s 重新打开localhost:4000&#x2F;查看主题是否生效 注意根目录下和theme目录下都应该有一个_config.yml,前者是配置全局的一些设置，后者是配置这个主题的一些设置 四. 自定义 输入以下命令会在MyBlog&#x2F;source下生成文件夹，并在文件夹中生成index.md文件，具体可以根据你下载的主题进行配置 1hexo new page &quot;example&quot; 生成后的index文件需要进行一些修改，如指定好layout，否则在执行hexo g的时候可能会报错 一般来说需要建立几个特殊的文件夹，如tags，categories 123$ hexo new page &quot;tags&quot;$ hexo new page &quot;categories&quot; 然后在生成的index.md的font-matter添加一些信息，如 12type: &quot;tags&quot;layout: tags 制作自定义的网页 一般来说，网页采取特定布局就放在MyBlog&#x2F;source的特定文件夹下 用markdown(.md文件)制作 输入以下命令可以生成指定布局的文章，默认为post 1$ hexo new [layout] &lt;title&gt; 需要在Front-matter，也就是是文件最上方以 — 分隔的区域，用于指定个别文件的变量，如： 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- 编写好.md文件后输入以下命令： 12$ hexo clean $$ hexo g$ hexo s 打开localhost:4000&#x2F;查看是否生效 五. github部署 在github中新建仓库，仓库名为[username].github.io 安装 hexo-deployer-git. 在 _config.yml（如果有已存在的请删除）添加如下配置： 12345deploy: type: git repo: https://github.com/&lt;username&gt;/&lt;project&gt; # example, https://github.com/hexojs/hexojs.github.io branch: gh-pages 运行 1$ hexo clean &amp;&amp; hexo deploy 有时候可能会报错连接错误，可以想办法加速(dddd)或者多试几次。 查看 username.github.io 上的网页是否部署成功。","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://shuaibisheng666.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://shuaibisheng666.github.io/tags/hexo/"}],"author":"Jiasheng Ma"},{"title":"Sheng's blog","slug":"index","date":"2022-08-06T15:45:00.000Z","updated":"2022-08-09T08:31:55.091Z","comments":true,"path":"2022/08/06/index/","link":"","permalink":"https://shuaibisheng666.github.io/2022/08/06/index/","excerpt":"","text":"欢迎来到帅比升的个人博客","categories":[],"tags":[]}],"categories":[{"name":"单片机","slug":"单片机","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"stm32","slug":"单片机/stm32","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/stm32/"},{"name":"linux驱动","slug":"linux驱动","permalink":"https://shuaibisheng666.github.io/categories/linux%E9%A9%B1%E5%8A%A8/"},{"name":"强化学习","slug":"强化学习","permalink":"https://shuaibisheng666.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"},{"name":"DQN","slug":"强化学习/DQN","permalink":"https://shuaibisheng666.github.io/categories/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN/"},{"name":"python","slug":"python","permalink":"https://shuaibisheng666.github.io/categories/python/"},{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/categories/c%E8%AF%AD%E8%A8%80/"},{"name":"深度学习","slug":"深度学习","permalink":"https://shuaibisheng666.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"pytorch","slug":"深度学习/pytorch","permalink":"https://shuaibisheng666.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/pytorch/"},{"name":"development","slug":"development","permalink":"https://shuaibisheng666.github.io/categories/development/"},{"name":"考研","slug":"考研","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/"},{"name":"高等数学","slug":"考研/高等数学","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"},{"name":"导数与微分","slug":"考研/高等数学/导数与微分","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/"},{"name":"积分","slug":"考研/高等数学/积分","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E7%A7%AF%E5%88%86/"},{"name":"反常积分","slug":"考研/高等数学/积分/反常积分","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E7%A7%AF%E5%88%86/%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/"},{"name":"线性代数","slug":"考研/线性代数","permalink":"https://shuaibisheng666.github.io/categories/%E8%80%83%E7%A0%94/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"最优化算法","slug":"算法/最优化算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/%E6%9C%80%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"},{"name":"搜索算法","slug":"算法/搜索算法","permalink":"https://shuaibisheng666.github.io/categories/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"},{"name":"esp8266","slug":"单片机/esp8266","permalink":"https://shuaibisheng666.github.io/categories/%E5%8D%95%E7%89%87%E6%9C%BA/esp8266/"},{"name":"操作系统","slug":"操作系统","permalink":"https://shuaibisheng666.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"数字逻辑","slug":"数字逻辑","permalink":"https://shuaibisheng666.github.io/categories/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"}],"tags":[{"name":"stm32","slug":"stm32","permalink":"https://shuaibisheng666.github.io/tags/stm32/"},{"name":"单片机","slug":"单片机","permalink":"https://shuaibisheng666.github.io/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"内存","slug":"内存","permalink":"https://shuaibisheng666.github.io/tags/%E5%86%85%E5%AD%98/"},{"name":"linux驱动","slug":"linux驱动","permalink":"https://shuaibisheng666.github.io/tags/linux%E9%A9%B1%E5%8A%A8/"},{"name":"linux","slug":"linux","permalink":"https://shuaibisheng666.github.io/tags/linux/"},{"name":"强化学习","slug":"强化学习","permalink":"https://shuaibisheng666.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"},{"name":"DQN","slug":"DQN","permalink":"https://shuaibisheng666.github.io/tags/DQN/"},{"name":"倒立摆","slug":"倒立摆","permalink":"https://shuaibisheng666.github.io/tags/%E5%80%92%E7%AB%8B%E6%91%86/"},{"name":"python","slug":"python","permalink":"https://shuaibisheng666.github.io/tags/python/"},{"name":"可变参数","slug":"可变参数","permalink":"https://shuaibisheng666.github.io/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"},{"name":"c语言","slug":"c语言","permalink":"https://shuaibisheng666.github.io/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"指针","permalink":"https://shuaibisheng666.github.io/tags/%E6%8C%87%E9%92%88/"},{"name":"pytorch","slug":"pytorch","permalink":"https://shuaibisheng666.github.io/tags/pytorch/"},{"name":"QT","slug":"QT","permalink":"https://shuaibisheng666.github.io/tags/QT/"},{"name":"MQTT","slug":"MQTT","permalink":"https://shuaibisheng666.github.io/tags/MQTT/"},{"name":"git","slug":"git","permalink":"https://shuaibisheng666.github.io/tags/git/"},{"name":"github","slug":"github","permalink":"https://shuaibisheng666.github.io/tags/github/"},{"name":"gitee","slug":"gitee","permalink":"https://shuaibisheng666.github.io/tags/gitee/"},{"name":"高等数学","slug":"高等数学","permalink":"https://shuaibisheng666.github.io/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"},{"name":"不可导点","slug":"不可导点","permalink":"https://shuaibisheng666.github.io/tags/%E4%B8%8D%E5%8F%AF%E5%AF%BC%E7%82%B9/"},{"name":"反常积分","slug":"反常积分","permalink":"https://shuaibisheng666.github.io/tags/%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/"},{"name":"省敛法","slug":"省敛法","permalink":"https://shuaibisheng666.github.io/tags/%E7%9C%81%E6%95%9B%E6%B3%95/"},{"name":"线性代数","slug":"线性代数","permalink":"https://shuaibisheng666.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"矩阵","slug":"矩阵","permalink":"https://shuaibisheng666.github.io/tags/%E7%9F%A9%E9%98%B5/"},{"name":"算法","slug":"算法","permalink":"https://shuaibisheng666.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://shuaibisheng666.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"优化算法","slug":"优化算法","permalink":"https://shuaibisheng666.github.io/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"},{"name":"搜索算法","slug":"搜索算法","permalink":"https://shuaibisheng666.github.io/tags/%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"},{"name":"esp8266","slug":"esp8266","permalink":"https://shuaibisheng666.github.io/tags/esp8266/"},{"name":"tft显示屏","slug":"tft显示屏","permalink":"https://shuaibisheng666.github.io/tags/tft%E6%98%BE%E7%A4%BA%E5%B1%8F/"},{"name":"LVGL","slug":"LVGL","permalink":"https://shuaibisheng666.github.io/tags/LVGL/"},{"name":"操作系统","slug":"操作系统","permalink":"https://shuaibisheng666.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"汇编","slug":"汇编","permalink":"https://shuaibisheng666.github.io/tags/%E6%B1%87%E7%BC%96/"},{"name":"数字逻辑","slug":"数字逻辑","permalink":"https://shuaibisheng666.github.io/tags/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/"},{"name":"微机原理","slug":"微机原理","permalink":"https://shuaibisheng666.github.io/tags/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"},{"name":"CPU","slug":"CPU","permalink":"https://shuaibisheng666.github.io/tags/CPU/"},{"name":"加法器","slug":"加法器","permalink":"https://shuaibisheng666.github.io/tags/%E5%8A%A0%E6%B3%95%E5%99%A8/"},{"name":"hal库","slug":"hal库","permalink":"https://shuaibisheng666.github.io/tags/hal%E5%BA%93/"},{"name":"platformio","slug":"platformio","permalink":"https://shuaibisheng666.github.io/tags/platformio/"},{"name":"vscode","slug":"vscode","permalink":"https://shuaibisheng666.github.io/tags/vscode/"},{"name":"blog","slug":"blog","permalink":"https://shuaibisheng666.github.io/tags/blog/"},{"name":"hexo","slug":"hexo","permalink":"https://shuaibisheng666.github.io/tags/hexo/"}]}