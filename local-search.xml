<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>强化学习之DQN控制倒立摆</title>
    <link href="/2024/12/19/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BDQN%E6%8E%A7%E5%88%B6%E5%80%92%E7%AB%8B%E6%91%86/"/>
    <url>/2024/12/19/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B9%8BDQN%E6%8E%A7%E5%88%B6%E5%80%92%E7%AB%8B%E6%91%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、强化学习介绍"><a href="#一、强化学习介绍" class="headerlink" title="一、强化学习介绍"></a>一、强化学习介绍</h2><p>强化学习（Reinforcement learning，RL）是人工智能和自动控制的一个交叉学科分支。</p><p>强化学习（RL）是人工智能和自动控制的一个交叉学科分支。他讨论的问题是一个智能体(agent) 怎么在一个复杂不确定的环境(environment) 里面去极大化它能获得的奖励。通过感知所处环境的 状态(state) 对 动作(action) 的 反应(reward)， 来指导更好的动作，从而获得最大的 收益(return)，这被称为在交互中学习，这样的学习方法就被称作强化学习。</p><p><img src="/../images/24.12.19/image.png" alt="截图"></p><p>近些年强化学习发展迅速，并且广泛应用于各个领域，例如自动驾驶，游戏，机器人控制等等。比如前些年大火的AlphaGo就采取了深度学习和强化学习的方法，在围棋领域战胜了人类最强的棋手。</p><ul><li>环境(Environment) 是一个外部系统，智能体处于这个系统中，能够感知到这个系统并且能够基于感知到的状态做出一定的行动。</li><li>智能体(Agent) 是一个嵌入到环境中的系统，能够通过采取行动来改变环境的状态。</li><li>状态(State)&#x2F;观察值(Observation)：状态是对世界的完整描述，不会隐藏世界的信息。观测是对状态的部分描述，可能会遗漏一些信息。</li><li>动作(Action)：不同的环境允许不同种类的动作，在给定的环境中，有效动作的集合经常被称为动作空间(action space)，包括离散动作空间(discrete action spaces)和连续动作空间(continuous action spaces)，例如，走迷宫机器人如果只有东南西北这 4 种移动方式，则其为离散动作空间;如果机器人向 360◦ 中的任意角度都可以移动，则为连续动作空间。</li><li>奖励(Reward)：是由环境给的一个标量的反馈信号(scalar feedback signal)，这个信号显示了智能体在某一步采 取了某个策略的表现如何。</li></ul><p>打个比方，假设我们操控一个游戏角色在一个二维地图上探索，</p><p><img src="/../images/24.12.19/2908f01847986842e0a07d91bb8f2785.png" alt="截图"></p><p>那么整张地图就是<strong>环境</strong>，而这名游戏角色就是一个<strong>智能体</strong>，智能体可以采取四个<strong>动作</strong>，上下左右，这四个动作构成一个<strong>动作空间</strong>，这个智能体所处的位置就是他的<strong>状态</strong>，当他执行某一个动作时，他的位置，也就是状态就会更新，同时环境会给他一个reward。这张地图有三种不同的格子，蓝色的代表安全的，红色的代表危险，草色的代表目标，当我们采取动作进入一个蓝色格子时，reward为0，进入红色格子时，reward为-10，进入草色格子时，reward为+5。</p><p>通过不停的在这个环境中探索，这个智能体应该能学到如何快速到达目标格子，规避危险的格子。</p><h2 id="二、Q-learning算法"><a href="#二、Q-learning算法" class="headerlink" title="二、Q-learning算法"></a>二、Q-learning算法</h2><p>Q-learning 是强化学习中一个非常经典的算法，是一种基于值迭代的强化学习算法，主要用于在给定环境中学习一个策略，使得智能体（agent）能够在与环境交互的过程中获得最大累计奖励。它通过学习一个状态-动作值函数（Q函数）来指导智能体的行为选择，适用于各种<strong>离散状态和动作</strong>的任务环境。</p><p>Q 学习算法使用状态动作值（也称为 Q 值）的 Q 表。这个 Q 表对<strong>每个状态有一行</strong>，对<strong>每个动作有一个列</strong>。每个单元格包含相应状态-动作对的估计 Q 值。<br>我们首先将所有 Q 值初始化为零。当agent与环境交互并获得反馈时，算法会迭代地改进这些 Q 值，直到它们收敛到最优 Q 值。它使用贝尔曼方程更新它们。</p><p>我们还是使用上面图中机器人走迷宫的例子来说明Q-learning算法。</p><p>那么图中智能体的<strong>位置就是状态</strong>，<strong>上下左右就是动作</strong>，那么我们可以构建如下的Q表：</p><p><img src="/../images/24.12.19/fc0bfbb29c6de5d7878823107f6269da.png" alt="截图"></p><p>当智能体处于某个位置(状态），他会从表里那一行的四个动作里选择一个Q值最大的动作执行，当然我们一开始的Q表是全为0的，那么智能体的动作就完全随机，相当于完全处于探索状态。</p><p>那么我们的目标就是优化这张Q表，让智能体能根据这张Q表做出“明智”的选择。</p><p>大概过程如下：</p><p>智能体四处探索，每次执行一次动作后，我们会获得下一个状态和reward以及下一个状态每一个动作的Q值，我们取里面最大的Q值和reward来更新当前执行的这个动作的Q值。</p><p><img src="/../images/24.12.19/e53753ada3b60bddc1c4d9f2661d569e.png" alt="截图"></p><br/><p>伪代码如下：</p><p><img src="/../images/24.12.19/97d1dbdacbed5b80c0bbb029718cc779.png" alt="截图"></p><h2 id="三、DQN算法"><a href="#三、DQN算法" class="headerlink" title="三、DQN算法"></a>三、DQN算法</h2><p>但是Qlearning是有局限性的，就是有时候智能体的状态是无穷多的，我们用Q表无法完全表示，比如倒立摆情况下，杆子的状态是由位置速度等变量组成的，但是杆子的位置速度等并非离散值而是一个连续值，比如杆子的速度可以是1，也可以是1.1，也可以是1.11，相当于状态是无穷多的，这个时候我们就不使用Q表了，而是使用神经网络来代替这张Q表，当输入一个状态时，我们会输出各个动作的Q值，然后从里面选择Q值最大的动作执行。</p><p><img src="/../images/24.12.19/f5378aae7dd871f317fd27fb4ee9a5d7.png" alt="截图"></p><ul><li>除了用神经网络代替Q表外，DQN还有两个独特的机制，分别是新旧两个神经网络和经验回放机制。<br>经验回放：智能体在与环境交互过程中，将经历的状态转移存储在经验回放缓冲区中。每次训练时，从缓冲区中随机抽取小批量样本进行训练，以打破数据之间的相关性。</li><li>目标网络：DQN使用两个网络：一个是当前的Q网络，另一个是目标网络。目标网络的参数在一定的时间间隔内更新，以减少训练过程中的波动。目标网络的引入使得Q值的更新更加稳定。<br>流程图如下：</li></ul><p><img src="/../images/24.12.19/61574bbe3e93398d3abb5f9801bff850.png" alt="截图"></p><h2 id="四、倒立摆控制实验"><a href="#四、倒立摆控制实验" class="headerlink" title="四、倒立摆控制实验"></a>四、倒立摆控制实验</h2><p>接下来我们通过一个实际的例子来演示一下DQN，我们将在gym仿真环境下实现倒立摆的控制。</p><br/><p>OpenAI Gym仿真环境介绍<br>          Gym是由OpenAI开发的一个用于强化学习研究的工具包，它提供了大量的标准化的仿真环境，供研究人员和开发者测试和开发强化学习算法。Gym的设计目的是简化和标准化强化学习的实验环境，以便能够方便地评估不同的RL算法。</p><p>Gym提供了统一的接口，使得不同的强化学习算法能够在不同的环境中进行训练和测试。接下来我们使用Gym仿真环境提供的一个倒立摆仿真环境CartPole-v1。</p><p>Cart Pole即车杆游戏，游戏模型如下图所示。游戏里面有一个小车，上有竖着一根杆子，每次重置后的初始状态会有所不同。小车需要左右移动来保持杆子竖直，为了保证游戏继续进行需要满足以下两个条件：</p><ul><li>杆子倾斜的角度θ 不能大于15°</li><li>小车移动的位置x需保持在一定范围（中间到两边各2.4个单位长度）<br><img src="/..%5Cimages%5C24.12.19%5C8866f4cd13f7e7625a03d5aa40199af0.png" alt="截图"></li></ul><p>对于这么一个系统，我们主要关注如下几个变量：<br><strong>动作（action）：</strong></p><ul><li>左移（0）</li><li>右移（1）</li></ul><p><strong>状态变量（state variables）：</strong></p><ul><li>x ：小车在轨道上的位置（position of the cart on the track）</li><li>θ：杆子与竖直方向的夹角（angle of the pole with the vertical）</li><li>x’：小车速度（cart velocity）</li><li>θ‘：角度变化率（rate of change of the angle）</li></ul><p>转换成强化学习的语言，就是小车和杆相当于一个智能体，小车的速度和位置和杆的角度和角速度4个状态构成了一个智能体的状态，智能体需要根据自己当前的状态执行一个动作，执行完动作后环境需要返回智能体的下一个状态和reward，智能体需要根据得到的下一个状态和reward更新自己的决策。</p><p>之所以我们选择DQN来控制倒立摆而不使用Qlearning的原因在于，倒立摆的状态变量取值是连续的，因此倒立摆的状态是无穷的，我们不可能用一个Q表来储存这个智能体的全部状态，因此我们选择神经网络来获得动作的Q值。</p><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gymnasium <span class="keyword">as</span> gym</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple, deque</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">env = gym.make(<span class="string">&#x27;CartPole-v1&#x27;</span>, render_mode=<span class="string">&#x27;human&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set up matplotlib</span></span><br><span class="line">is_ipython = <span class="string">&#x27;inline&#x27;</span> <span class="keyword">in</span> matplotlib.get_backend()</span><br><span class="line"><span class="keyword">if</span> is_ipython:</span><br><span class="line">    <span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"></span><br><span class="line">plt.ion()</span><br><span class="line"></span><br><span class="line"><span class="comment"># if GPU is to be used</span></span><br><span class="line">device = torch.device(</span><br><span class="line">    <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span></span><br><span class="line">    <span class="string">&quot;mps&quot;</span> <span class="keyword">if</span> torch.backends.mps.is_available() <span class="keyword">else</span></span><br><span class="line">    <span class="string">&quot;cpu&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Transition = namedtuple(<span class="string">&#x27;Transition&#x27;</span>,</span><br><span class="line">                        (<span class="string">&#x27;state&#x27;</span>, <span class="string">&#x27;action&#x27;</span>, <span class="string">&#x27;next_state&#x27;</span>, <span class="string">&#x27;reward&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReplayMemory</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity</span>):</span><br><span class="line">        self.memory = deque([], maxlen=capacity)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Save a transition&quot;&quot;&quot;</span></span><br><span class="line">        self.memory.append(Transition(*args))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">self, batch_size</span>):</span><br><span class="line">        <span class="keyword">return</span> random.sample(self.memory, batch_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.memory)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DQN</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_observations, n_actions</span>):</span><br><span class="line">        <span class="built_in">super</span>(DQN, self).__init__()</span><br><span class="line">        self.layer1 = nn.Linear(n_observations, <span class="number">128</span>)</span><br><span class="line">        self.layer2 = nn.Linear(<span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">        self.layer3 = nn.Linear(<span class="number">128</span>, n_actions)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Called with either one element to determine next action, or a batch</span></span><br><span class="line">    <span class="comment"># during optimization. Returns tensor([[left0exp,right0exp]...]).</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = F.relu(self.layer1(x))</span><br><span class="line">        x = F.relu(self.layer2(x))</span><br><span class="line">        <span class="keyword">return</span> self.layer3(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># BATCH_SIZE is the number of transitions sampled from the replay buffer</span></span><br><span class="line"><span class="comment"># GAMMA is the discount factor as mentioned in the previous section</span></span><br><span class="line"><span class="comment"># EPS_START is the starting value of epsilon</span></span><br><span class="line"><span class="comment"># EPS_END is the final value of epsilon</span></span><br><span class="line"><span class="comment"># EPS_DECAY controls the rate of exponential decay of epsilon, higher means a slower decay</span></span><br><span class="line"><span class="comment"># TAU is the update rate of the target network</span></span><br><span class="line"><span class="comment"># LR is the learning rate of the ``AdamW`` optimizer</span></span><br><span class="line">BATCH_SIZE = <span class="number">128</span></span><br><span class="line">GAMMA = <span class="number">0.99</span></span><br><span class="line">EPS_START = <span class="number">0.9</span></span><br><span class="line">EPS_END = <span class="number">0.05</span></span><br><span class="line">EPS_DECAY = <span class="number">1000</span></span><br><span class="line">TAU = <span class="number">0.005</span></span><br><span class="line">LR = <span class="number">1e-4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get number of actions from gym action space</span></span><br><span class="line">n_actions = env.action_space.n</span><br><span class="line"><span class="comment"># Get the number of state observations</span></span><br><span class="line">state, info = env.reset()</span><br><span class="line">n_observations = <span class="built_in">len</span>(state)</span><br><span class="line"></span><br><span class="line">policy_net = DQN(n_observations, n_actions).to(device)</span><br><span class="line">target_net = DQN(n_observations, n_actions).to(device)</span><br><span class="line">target_net.load_state_dict(policy_net.state_dict())</span><br><span class="line"></span><br><span class="line">optimizer = optim.AdamW(policy_net.parameters(), lr=LR, amsgrad=<span class="literal">True</span>)</span><br><span class="line">memory = ReplayMemory(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">steps_done = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_action</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">global</span> steps_done</span><br><span class="line">    sample = random.random()</span><br><span class="line">    eps_threshold = EPS_END + (EPS_START - EPS_END) * \</span><br><span class="line">        math.exp(-<span class="number">1.</span> * steps_done / EPS_DECAY)</span><br><span class="line">    steps_done += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> sample &gt; eps_threshold:</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># t.max(1) will return the largest column value of each row.</span></span><br><span class="line">            <span class="comment"># second column on max result is index of where max element was</span></span><br><span class="line">            <span class="comment"># found, so we pick action with the larger expected reward.</span></span><br><span class="line">            <span class="keyword">return</span> policy_net(state).<span class="built_in">max</span>(<span class="number">1</span>).indices.view(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> torch.tensor([[env.action_space.sample()]], device=device, dtype=torch.long)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">episode_durations = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_durations</span>(<span class="params">show_result=<span class="literal">False</span></span>):</span><br><span class="line">    plt.figure(<span class="number">1</span>)</span><br><span class="line">    durations_t = torch.tensor(episode_durations, dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">    <span class="keyword">if</span> show_result:</span><br><span class="line">        plt.title(<span class="string">&#x27;Result&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plt.clf()</span><br><span class="line">        plt.title(<span class="string">&#x27;Training...&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Episode&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Duration&#x27;</span>)</span><br><span class="line">    plt.plot(durations_t.numpy())</span><br><span class="line">    <span class="comment"># Take 100 episode averages and plot them too</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(durations_t) &gt;= <span class="number">100</span>:</span><br><span class="line">        means = durations_t.unfold(<span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span>).mean(<span class="number">1</span>).view(-<span class="number">1</span>)</span><br><span class="line">        means = torch.cat((torch.zeros(<span class="number">99</span>), means))</span><br><span class="line">        plt.plot(means.numpy())</span><br><span class="line"></span><br><span class="line">    plt.pause(<span class="number">0.001</span>)  <span class="comment"># pause a bit so that plots are updated</span></span><br><span class="line">    <span class="keyword">if</span> is_ipython:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> show_result:</span><br><span class="line">            display.display(plt.gcf())</span><br><span class="line">            display.clear_output(wait=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            display.display(plt.gcf())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_model</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(memory) &lt; BATCH_SIZE:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    transitions = memory.sample(BATCH_SIZE)</span><br><span class="line">    <span class="comment"># Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for</span></span><br><span class="line">    <span class="comment"># detailed explanation). This converts batch-array of Transitions</span></span><br><span class="line">    <span class="comment"># to Transition of batch-arrays.</span></span><br><span class="line">    batch = Transition(*<span class="built_in">zip</span>(*transitions))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute a mask of non-final states and concatenate the batch elements</span></span><br><span class="line">    <span class="comment"># (a final state would&#x27;ve been the one after which simulation ended)</span></span><br><span class="line">    non_final_mask = torch.tensor(<span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> s: s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>,</span><br><span class="line">                                          batch.next_state)), device=device, dtype=torch.<span class="built_in">bool</span>)</span><br><span class="line">    non_final_next_states = torch.cat([s <span class="keyword">for</span> s <span class="keyword">in</span> batch.next_state</span><br><span class="line">                                                <span class="keyword">if</span> s <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>])</span><br><span class="line">    state_batch = torch.cat(batch.state)</span><br><span class="line">    action_batch = torch.cat(batch.action)</span><br><span class="line">    reward_batch = torch.cat(batch.reward)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute Q(s_t, a) - the model computes Q(s_t), then we select the</span></span><br><span class="line">    <span class="comment"># columns of actions taken. These are the actions which would&#x27;ve been taken</span></span><br><span class="line">    <span class="comment"># for each batch state according to policy_net</span></span><br><span class="line">    state_action_values = policy_net(state_batch).gather(<span class="number">1</span>, action_batch)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute V(s_&#123;t+1&#125;) for all next states.</span></span><br><span class="line">    <span class="comment"># Expected values of actions for non_final_next_states are computed based</span></span><br><span class="line">    <span class="comment"># on the &quot;older&quot; target_net; selecting their best reward with max(1).values</span></span><br><span class="line">    <span class="comment"># This is merged based on the mask, such that we&#x27;ll have either the expected</span></span><br><span class="line">    <span class="comment"># state value or 0 in case the state was final.</span></span><br><span class="line">    next_state_values = torch.zeros(BATCH_SIZE, device=device)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        next_state_values[non_final_mask] = target_net(non_final_next_states).<span class="built_in">max</span>(<span class="number">1</span>).values</span><br><span class="line">    <span class="comment"># Compute the expected Q values</span></span><br><span class="line">    expected_state_action_values = (next_state_values * GAMMA) + reward_batch</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute Huber loss</span></span><br><span class="line">    criterion = nn.SmoothL1Loss()</span><br><span class="line">    loss = criterion(state_action_values, expected_state_action_values.unsqueeze(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Optimize the model</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    <span class="comment"># In-place gradient clipping</span></span><br><span class="line">    torch.nn.utils.clip_grad_value_(policy_net.parameters(), <span class="number">100</span>)</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">or</span> torch.backends.mps.is_available():</span><br><span class="line">    num_episodes = <span class="number">600</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    num_episodes = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> <span class="built_in">range</span>(num_episodes):</span><br><span class="line">    <span class="comment"># Initialize the environment and get its state</span></span><br><span class="line">    state, info = env.reset()</span><br><span class="line">    state = torch.tensor(state, dtype=torch.float32, device=device).unsqueeze(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> count():</span><br><span class="line">        env.render()  <span class="comment"># Render the environment</span></span><br><span class="line">        action = select_action(state)</span><br><span class="line">        observation, reward, terminated, truncated, _ = env.step(action.item())</span><br><span class="line">        reward = torch.tensor([reward], device=device)</span><br><span class="line">        done = terminated <span class="keyword">or</span> truncated</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> terminated:</span><br><span class="line">            next_state = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            next_state = torch.tensor(observation, dtype=torch.float32, device=device).unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Store the transition in memory</span></span><br><span class="line">        memory.push(state, action, next_state, reward)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Move to the next state</span></span><br><span class="line">        state = next_state</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform one step of the optimization (on the policy network)</span></span><br><span class="line">        optimize_model()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Soft update of the target network&#x27;s weights</span></span><br><span class="line">        <span class="comment"># θ′ ← τ θ + (1 −τ )θ′</span></span><br><span class="line">        target_net_state_dict = target_net.state_dict()</span><br><span class="line">        policy_net_state_dict = policy_net.state_dict()</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> policy_net_state_dict:</span><br><span class="line">            target_net_state_dict[key] = policy_net_state_dict[key]*TAU + target_net_state_dict[key]*(<span class="number">1</span>-TAU)</span><br><span class="line">        target_net.load_state_dict(target_net_state_dict)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> done:</span><br><span class="line">            episode_durations.append(t + <span class="number">1</span>)</span><br><span class="line">            plot_durations()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Complete&#x27;</span>)</span><br><span class="line">plot_durations(show_result=<span class="literal">True</span>)</span><br><span class="line">plt.ioff()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>代码运行结果如下：<br><img src="/..%5Cimages%5C24.12.19%5C1734615316394.jpg"></p><p>从左边的表可以看到，随着训练的epoch逐渐增加，倒立摆的持续时间越来越长。</p>]]></content>
    
    
    <categories>
      
      <category>强化学习</category>
      
      <category>DQN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>强化学习</tag>
      
      <tag>DQN</tag>
      
      <tag>倒立摆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python函数参数中的args,kwargs是什么意思</title>
    <link href="/2024/07/08/python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84args,kwargs%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
    <url>/2024/07/08/python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84args,kwargs%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>python函数参数中的*args, **kwargs是什么意思：</p><p>你可能会想到c语言中的int main(int argc, char const *argv[])，但<strong>这二者意思完全不同</strong>。c语言的int main(int argc, char const *argv[])在我另一篇文章中有讲到，是为了确定传入参数个数和参数名称的，且是main函数特有的。</p><p>而在Python中，*args 和 **kwargs 是用来处理函数定义中可变数量的参数的特殊语法：</p><p>*<strong>args 用于传递非关键字参数列表（位置参数）</strong>，它允许将不定数量的参数作为元组传递给一个函数。当函数被调用时，这些参数会被打包进一个元组中。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line">my_function(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,)</span><br></pre></td></tr></table></figure><p>**<strong>kwargs 用于传递关键字参数（键值对）</strong>，它允许将不定数量的关键字参数作为字典传递给一个函数。当函数被调用时，这些参数会被打包进一个字典中。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">my_function(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>如果*args, **kwargs一起用, 则示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">my_function(<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">(<span class="number">1</span>,)</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>那么你可能会问my_function(1, b&#x3D;2, 3)会输出什么，答案是会报错，因为<strong>python规定位置参数不能在关键字参数后面</strong>。</p><p>当然c语言中也有类似的传入参数个数不固定的情况，是通过导入stdarg.h库解决的，具体可看我另一篇文章。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>可变参数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>printf函数参数个数可变实现原理</title>
    <link href="/2024/07/07/printf%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E5%8F%AF%E5%8F%98%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2024/07/07/printf%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%E5%8F%AF%E5%8F%98%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>我们在使用printf函数时会发现，printf函数与其他函数最大的区别就在于该函数<strong>可以接收不同数量的参数</strong>，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>那么这是怎么实现的呢？</p><p>原因在于printf函数<strong>使用了&lt;stdarg.h&gt;库</strong>，这个库是c语言内置的标准库，<strong>专门用来处理参数数量可变的情况</strong>。</p><p>而且处理参数数量可变情况一般写法是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> args,...)</span></span><br></pre></td></tr></table></figure><p>这里args指后面跟着的参数数量，… 表示可变参数（variadic arguments）。它允许一个函数接受数量可变的参数，即可以接受不定数量的参数。</p><p>假如你去stdio.h查找printf函数，你会发现printf函数声明是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">printf</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__restrict __format, ...)</span>;</span><br></pre></td></tr></table></figure><p>第一个参数是一个字符串，后面的省略号就是可变参数。</p><p>接下来我们自己实现一个带可变参数的函数，主要使用的就是stdarg.h库里的va_list，va_start(), va_arg(), va_end()函数。示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//一定要包含这个库</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="comment">//一定要带省略号，代表可变参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> args,...)</span>&#123;</span><br><span class="line">    va_list va;</span><br><span class="line">    <span class="comment">//只有带省略号的函数才能调用va_start函数，否则会报错</span></span><br><span class="line">    va_start(va,args);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,va_arg(va,<span class="type">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(va);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//第一个2指后面跟2个参数</span></span><br><span class="line">    fun(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    fun(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>逐行分析：</p><ul><li>void fun(int args,…) 定义一个带可变参数的函数，省略号代表可变参数，注意<strong>省略号前一定要至少有一个参数</strong>，因为 va_start 宏需要一个确定的参数来定位变长参数列表。</li><li>va_list va; 定义一个变长参数列表va，va_list 来自stdarg.h 库。</li><li>va_start(va,args);  这个函数意思是让va指向args后面的可变参数列表，也就是省略号代表的起始地址，假如函数是void fun(int args,int a，…) 那么这里就应该改成va_start(va,a)</li><li>后面的循环就是根据第一个参数的多少循环打印后面跟着的参数，va_arg(va,int)就是指从va里以int类型取出一个参数，其参数指针会自动递增。</li><li>va_end(args) 用于结束对可变参数列表的访问。</li></ul><p>可以看到，<strong>写法基本是比较固定的，就是定义va_list, 然后初始化va_start,va_arg取出参数,va_end结束访问。</strong></p><p>假如你可变参数只有3个，但你却调用了四次va_arg取出参数，那么可能会访问越界内存，虽然不会报错，但会得到一个未知的数据。</p><p>而<strong>va_list 本身并不直接包含参数个数的信息</strong>，因为可变参数列表在函数内部并没有一个固定的结构或长度信息。这也就是为什么我们<strong>第一个参数一般都是后面可变参数的个数，就是为了确保不会越界</strong>。</p><p>可是printf第一个参数是字符串，并不知道后面可变参数的个数，它是怎么确保va_list不越界的呢？</p><p>原因是通过你字符串里的格式化输出个数来确保不越界的，比如printf(“%d,%s”,a,b)，检测到%d就调用一次va_arg取出参数，</p><p>检测到%s就调用一次va_arg取出参数，这样就不会越界了。</p><p>当然，如果你格式化输出个数和后面的参数个数不匹配，比如printf(“%d,%c\n”,1)，这样虽然<strong>编译器会警告</strong>，但实际也能编译通过，</p><p>但结果就是会调用两次va_arg取出两个参数，结果就是访问越界输出一个奇怪的结果。</p>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言中main函数的形参是什么意思</title>
    <link href="/2024/07/06/c%E8%AF%AD%E8%A8%80%E4%B8%ADmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
    <url>/2024/07/06/c%E8%AF%AD%E8%A8%80%E4%B8%ADmain%E5%87%BD%E6%95%B0%E7%9A%84%E5%BD%A2%E5%8F%82%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>有些c程序的main函数参数里经常会出现int argc, char const *argv[]，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是什么意思呢。</p><p>从类型上看，第一个参数是一个整型，第二个是一个字符串数组，这代表什么呢？</p><p>实际上，这是<strong>c语言入口函数main特有的一个特性</strong>。argc和argv的意思是：</p><ul><li>argc：表示命令行参数的数量（argument count），即程序运行时传递给程序的参数个数，包括程序名称本身。在调用程序时，至少会有一个参数，即程序的名称。</li><li>argv[]：是一个指向字符串数组的指针（argument vector），每个元素是一个指向传递给程序的参数的字符串指针。</li></ul><p>举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,argc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;argc;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">terminal：</span><br><span class="line">编译：gcc test.c -o test</span><br><span class="line">运行: ./test a ab abc</span><br><span class="line">输出：</span><br><span class="line"><span class="number">4</span></span><br><span class="line">./test</span><br><span class="line">a</span><br><span class="line">ab</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><p>你会发现你明明输入3个参数a,ab,abc，但argc却是4，原因是程序名称本身也会被作为参数传入进去。因此最终输出.&#x2F;test，a，ab，abc</p><p>当然改变argc和argv名称也是可以的，效果一样。</p><p>但是注意main函数的形参第一个一定要是int，第二个要是字符串数组，否则是不生效的。</p>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数指针与函数数组</title>
    <link href="/2024/07/06/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84/"/>
    <url>/2024/07/06/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E4%B8%8E%E5%87%BD%E6%95%B0%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1-函数指针"><a href="#1-函数指针" class="headerlink" title="1. 函数指针"></a>1. 函数指针</h2><p>我们都知道c语言指针可以指向整形，浮点型，字符等等，但实际上<strong>指针也可以指向函数</strong>。</p><p>实际上当我们定义一个函数时，最终都会创建一个函数指针存储函数的地址。</p><p>那么函数指针怎么定义呢？函数指针的定义不同于其他变量的定义，其他变量的定义是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量类型 变量名；</span><br></pre></td></tr></table></figure><p>但c语言没有函数类型这一变量类型，因为函数类型太多了，你可以给一个函数传入整形，浮点，也可以返回字符，指针等等，</p><p>因此函数类型不是单一的。</p><p>因此要确定一个函数的类型需要确定他的形参数量和类型，返回参数的类型。</p><p>因此函数指针的定义是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数返回类型 (*指针名)(形参类型1,形参类型2);</span><br></pre></td></tr></table></figure><p>注意这里(<em>指针名)的</em><strong>括号不能去掉</strong>，否则的话就会变成   函数返回类型  *指针名(形参类型1,形参类型2);  这个的意思是定义一个返回类型为指针的函数</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fun\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//定义一个指向返回类型为void，无形参的函数的指针</span></span><br><span class="line">    <span class="type">void</span> (*a)() = fun;</span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    a();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">fun</span><br></pre></td></tr></table></figure><p>通过函数指针我们就可以将一个函数1传给另一个函数2当做形参，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fun%d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun2</span><span class="params">(<span class="type">void</span> (*a)(<span class="type">int</span>),<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    a(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//定义一个指向返回类型为void，形参为int的函数的指针</span></span><br><span class="line">    <span class="type">void</span> (*fun_pointer)(<span class="type">int</span>) = fun;</span><br><span class="line">    <span class="comment">//将函数指针作为参数传给fun2</span></span><br><span class="line">    fun2(fun_pointer,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">fun1</span><br></pre></td></tr></table></figure><h2 id="2-函数数组"><a href="#2-函数数组" class="headerlink" title="2. 函数数组"></a>2. 函数数组</h2><p>不止如此，c语言除了函数指针，还有函数数组，定义方式和函数指针也很相似，只需要加个[]即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数返回类型 (*数组名[])(形参类型<span class="number">1</span>,形参类型<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fun1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fun2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fun2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个函数数组</span></span><br><span class="line"><span class="type">void</span> (*a[])() = &#123;fun1,fun2&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    a[<span class="number">0</span>]();</span><br><span class="line">    a[<span class="number">1</span>]();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">fun1</span><br><span class="line">fun2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pytorch中nn.module如何自动调用forward()方法</title>
    <link href="/2024/07/05/pytorch%E4%B8%ADnn.module%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8forward()%E6%96%B9%E6%B3%95/"/>
    <url>/2024/07/05/pytorch%E4%B8%ADnn.module%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8forward()%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>当我们在使用pytorch的时候，观察以下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;forward&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">out = net(x)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">init</span><br><span class="line">forward</span><br><span class="line">tensord(<span class="number">2.</span>)</span><br></pre></td></tr></table></figure><p>定义一个神经网络Net后实现forward方法，后续实例化为net网络后直接传入x即可自动调用forward方法，可明明我们并未调用forward()方法，具体如何实现的呢？</p><p><strong>原因在于Net继承于nn.Module，而nn.Module内部实现了_<em>call</em>_()方法</strong>，</p><p>在Python中，_<em>call_</em>() 是一个特殊方法（也称为魔术方法或魔法方法），用于使对象实例可以像函数一样被调用。当一个类定义了 _<em>call_</em>() 方法时，它的实例可以像调用函数一样被调用，而不仅仅是通过类中的其他方法来调用。如下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,a</span>):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;call&#x27;</span>)</span><br><span class="line">      <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">init</span><br><span class="line">call</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>而在pytorch中，_<em>call_</em>()方法会自动调用forward()方法。</p><p>具体说：当你调用net(x)后，net会自动调用_<em>call_</em>()方法, 相当于net._<em>call_</em>(x),而_<em>call_</em>()又会自动调用forward()方法。</p><p>相当于：net(x) –&gt; net._<em>call_</em>(x) –&gt;net.forward(x)</p><p><strong>pytorch源码分析：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from typing import Callable</span><br><span class="line"></span><br><span class="line">class Module():</span><br><span class="line">  __call__ : Callable[..., Any] = _wrapped_call_impl</span><br></pre></td></tr></table></figure><p>可以看到虽然有_<em>call_</em>()方法，但他并没有像我们上面写的那样定义一个def  _<em>call_</em>()方法，分析一下这句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__call__ : Callable[..., Any] = _wrapped_call_impl</span><br></pre></td></tr></table></figure><p>这里Callable[…, Any] 是一个<strong>类型提示</strong>，用来表示一个可调用对象的类型。<strong>类型提示是什么</strong>：</p><p>类型提示是一种在函数参数、返回值以及变量上添加类型信息的注解，这些注解<strong>并不会影响运行时的行为，但可以被静态类型检查工具和IDE用来提供更好的代码分析和错误检测。</strong></p><p>你定义函数时 def fun(a:int) 这里的a:int 就是类型提示</p><p>让我们来分解这个类型提示的含义：</p><ol><li><p>[…]: 这个省略号 … 表示可接受任意数量的参数，即函数或方法可以接受任意数量的参数，包括零个参数。</p></li><li><p>Any: 这个关键字表示函数或方法可以返回任意类型的值。</p><p>综合起来，<strong>_<em>call</em>_ : Callable[…, Any] 表示这个类型可以是一个接受任意数量参数的可调用对象，并且可以返回任意类型的值。</strong>在类型提示中，这种方式用于表达灵活的函数签名，特别是当函数可能具有不固定参数数量或不确定返回类型时。</p></li></ol><p>而后面的 <strong>= _wrapped_call_impl 相当于给这个_<em>call_</em>()方法取了一个别名，</strong> 接下来我们去找这个方法，源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_wrapped_call_impl</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="keyword">if</span> self._compiled_call_impl <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> self._compiled_call_impl(*args, **kwargs)  <span class="comment"># type: ignore[misc]</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self._call_impl(*args, **kwargs)</span><br></pre></td></tr></table></figure><p>可以看到这里根据对象实例中的 _compiled_call_impl 属性是否不为 None执行不同的方法，</p><p>当_compiled_call_impl 不为None时，执行self._compiled_call_impl(*args, **kwargs)</p><p>否则执行self._call_impl(*args, **kwargs)</p><p>观看源码，可以发现<strong>一般情况下，_compiled_call_impl 都是None的，除非你调用了Module里的compile方法</strong>，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compile</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Compile this Module&#x27;s forward using :func:`torch.compile`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This Module&#x27;s `__call__` method is compiled and all arguments are passed as-is</span></span><br><span class="line"><span class="string">    to :func:`torch.compile`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    See :func:`torch.compile` for details on the arguments for this function.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self._compiled_call_impl = torch.<span class="built_in">compile</span>(self._call_impl, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>根据源码的注释，可以看到这段代码的使用torch.compile编译模块的_<em>call</em><em>()方法，其效果是将当前模块的 _<em>call</em></em> 方法进行了编译或者优化，并将优化后的实现保存在 _compiled_call_impl 属性中。编译后的实现可以提升执行效率或者改进其他方面的性能，具体取决于 torch.compile 函数的实现和参数设置。</p><p>如果你未调用过该compile方法，那么_wrapped_call_impl()接下来就会执行_call_impl(), _call_impl()源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_call_impl</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">    forward_call = (self._slow_forward <span class="keyword">if</span> torch._C._get_tracing_state() <span class="keyword">else</span> self.forward)</span><br><span class="line">    <span class="comment"># If we don&#x27;t have any hooks, we want to skip the rest of the logic in</span></span><br><span class="line">    <span class="comment"># this function, and just call forward.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (self._backward_hooks <span class="keyword">or</span> self._backward_pre_hooks <span class="keyword">or</span> self._forward_hooks <span class="keyword">or</span> self._forward_pre_hooks</span><br><span class="line">            <span class="keyword">or</span> _global_backward_pre_hooks <span class="keyword">or</span> _global_backward_hooks</span><br><span class="line">            <span class="keyword">or</span> _global_forward_hooks <span class="keyword">or</span> _global_forward_pre_hooks):</span><br><span class="line">        <span class="keyword">return</span> forward_call(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = <span class="literal">None</span></span><br><span class="line">    ...后面的太长省略</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，分析forward_call &#x3D; (self._slow_forward if torch._C._get_tracing_state() else self.forward) </p><p><strong>torch._C._get_tracing_state() 函数用来检查当前是否处于追踪状态（tracing state）</strong>。如果处于追踪状态，说明在进行模型的图形化表示（例如在 TorchScript 中），此时使用 _slow_forward 方法。</p><p>否则使用 self.forward 方法。</p><p>后面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (self._backward_hooks <span class="keyword">or</span> self._backward_pre_hooks <span class="keyword">or</span> self._forward_hooks <span class="keyword">or</span> self._forward_pre_hooks</span><br><span class="line">        <span class="keyword">or</span> _global_backward_pre_hooks <span class="keyword">or</span> _global_backward_hooks</span><br><span class="line">        <span class="keyword">or</span> _global_forward_hooks <span class="keyword">or</span> _global_forward_pre_hooks):</span><br><span class="line">    <span class="keyword">return</span> forward_call(*args, **kwargs)</span><br></pre></td></tr></table></figure><p>意思是：如果当前模块没有任何的钩子（hooks），则跳过此方法中的其他逻辑，直接调用 forward_call 方法并返回其结果。<br><strong>钩子（hooks）通常用于在模型运行过程中添加额外的操作或者记录信息，例如日志、梯度信息等。</strong></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT添加MQTT模块</title>
    <link href="/2024/02/17/QT%E6%B7%BB%E5%8A%A0mqtt%E6%A8%A1%E5%9D%97/"/>
    <url>/2024/02/17/QT%E6%B7%BB%E5%8A%A0mqtt%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="一-首先确保已经安装好QT"><a href="#一-首先确保已经安装好QT" class="headerlink" title="一. 首先确保已经安装好QT"></a>一. 首先确保已经安装好QT</h2><pre><code>1. QT官网：https://www.qt.io/zh-cn/2. 根据需求选择版本安装包3. 注册登录账号4. 选择好安装路径6. 选择好需要的开发组件，比如windows桌面就MingGw，android就选Android</code></pre><h2 id="二-下载QT在github发布的MQTT源码"><a href="#二-下载QT在github发布的MQTT源码" class="headerlink" title="二. 下载QT在github发布的MQTT源码"></a>二. 下载QT在github发布的MQTT源码</h2><pre><code>1. 源码地址：https://github.com/qt/qtmqtt，需要确保在其分支中下载与本地QT版本对应的代码版本2. 打开工程：在QT中选择打开项目，然后选择源码中的CmakeList.txt即可打开工程</code></pre><h2 id="三-编译源码"><a href="#三-编译源码" class="headerlink" title="三. 编译源码"></a>三. 编译源码</h2><pre><code>1. 选择构建组件：选择好自己的构建组件，如果需求是想要在windows桌面下开发，则一般选择MingGW Desktop，  如果是想开发一个android app，则选择android。2. 开始编译：点击build（构建）3. 构建完成并且没有错误的情况下，在源码同级目录会生成一个文件夹，编译输出文件都在里面</code></pre><h2 id="四，导入模块"><a href="#四，导入模块" class="headerlink" title="四，导入模块"></a>四，导入模块</h2><pre><code>1. 打开输出文件，里面有五个文件夹的文件是需要用到的，分别是bin,include, lib, modules, mkspecs2. 打开自己QT的安装文件夹，找到编译mqtt源码用到的组件的目录，比如我的是D:\software\Qt\6.8.0\mingw_64，  你会发现这里面同样存在这五个文件夹，接下来我们只需要将编译源码得到的文件依次正确复制到QT的安装目录中即可3. 首先将编译源码得到的bin里的文件复制到mingw_64\bin里面4. 将编译源码得到的include里的文件复制到mingw_64\include里面5. 将编译源码得到的lib里的.a 和 .prl后缀的文件复制到mingw_64\lib里面6. 将编译源码得到的modules里的.json文件复制到mingw_64\mudules里面7. 将编译源码得到的mkspecs里的mudules文件夹整个复制到mingw_64\mkspecs</code></pre><h2 id="五-验证导入模块是否成功"><a href="#五-验证导入模块是否成功" class="headerlink" title="五. 验证导入模块是否成功"></a>五. 验证导入模块是否成功</h2><pre><code>1. 按照前面编译源码的方法，打开下载的mqtt源码下的examples/mqtt，选择simpleclient,编译运行，如果成功会显示一个界面。2. 接下来如果你的项目需要用到mqtt，直接在配置文件里加上 QT += mqtt即可</code></pre>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用教程</title>
    <link href="/2024/01/20/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2024/01/20/git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="一-git简介"><a href="#一-git简介" class="headerlink" title="一. git简介"></a>一. git简介</h3><ol><li>git实际上就是个代码管理工具，可以帮助你管理代码，比如你想开发一个功能，后面遇到障碍了，想重来，就需要你一开始就进行代码备份，但有git就可以直接将代码回退到之前的版本，或者你与其他人协同开发，你们互相之间必须清楚对方对代码做了什么，这个时候就需要有代码管理工具对你们的修改进行记录。</li><li>其余代码管理工具还有SVN等，但基本都被淘汰，现在基本都是用git，因为git是分布式的，每个人的主机都可以是一个代码仓库，不同仓库直接可以互通修改。</li></ol><h3 id="二-git安装配置"><a href="#二-git安装配置" class="headerlink" title="二. git安装配置"></a>二. git安装配置</h3><ol><li>直接官网下载安装，一直默认下一步即可</li><li>初始化配置：鼠标右键git bash here，输入：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;name&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure>其中name和email随意，email设置是不存在的都可以</li></ol><h3 id="三-基本命令"><a href="#三-基本命令" class="headerlink" title="三. 基本命令"></a>三. 基本命令</h3><ol><li><code>git init</code><br>   初始化一个本地仓库，新建一个文件夹，然后进入右键git bash here，输入git init</li><li><code>git add</code><br>   将工作区文件添加进暂存区，修改完代码后需要将文件添加进暂存区</li><li><code>git commit -m &quot;注释&quot;</code><br>   将暂存区文件提交到仓库，表明这是一个正式的版本，注释表明你的提交做了哪些修改</li><li><code>git log </code><br>输出各个版本信息</li><li><code>git reset --hard commitID</code><br>回退到某个版本，commitID可以通过git log查看</li><li><code>git reflog</code><br>这个指令可以看到已经删除的提交记录</li></ol><h3 id="四-添加忽略配置文件"><a href="#四-添加忽略配置文件" class="headerlink" title="四. 添加忽略配置文件"></a>四. 添加忽略配置文件</h3><p> 有时候我们需要git忽略一些文件不对其进行管理，比如一些说明文件，pdf啥的，可以通过以下方式实现：</p><ol><li>新建文件.gitignore</li><li>在.gitignore中添加文件名，可以使用通配符等</li><li>commit提交.gitignore到仓库</li></ol><h3 id="五-git-分支"><a href="#五-git-分支" class="headerlink" title="五. git 分支"></a>五. git 分支</h3><p>有时候在进行功能开发时，可能需要开发多个功能，不使用代码管理工具，同时开发新功能时就可能造成两个功能互相影响，使用代码管理工具，通过使用分支可以使功能开发同时进行，等两个功能都开发完毕后，就可以将两个分支合并，假如其中一个分支功能开发失败了，直接将分支删除即可，不会影响另一个分支功能。</p><ol><li><code>git branch &quot;branch_name&quot;</code><br> 新建一个分支</li><li><code>git checkout &quot;branch_name&quot;</code><br> 切换分支</li><li><code>git merge &quot;branch_name&quot;</code><br> 将分支与当前所处分支合并</li><li><code>git branch -d &quot;branch_name&quot;</code><br> 删除分支</li></ol><p>分支就好比影分身之术，写代码就好比你现在在攻略一张地图，开发新功能就好比你想往未知领域探索，于是你在某一刻创建了一个分身，此时你的意识可以在分身之间切换，git log有个head-&gt;master表示你处于master分支，head就好比你的意识，你的意识切换到哪个分身，你就可以控制那个分身行动，往前探索，假如区域探索完毕（功能开发完毕），就和另一个分身合并，假如分身遭受危险，被怪物击败，只要将那个分身删除，切换另一个分身继续探索即可。</p><h3 id="六-远程仓库"><a href="#六-远程仓库" class="headerlink" title="六. 远程仓库"></a>六. 远程仓库</h3><p>假如你想与其他人协同开发，或者你想将自己的代码开源，就可以使用远程仓库。远程仓库相当于一个第三方服务器，你可以将代码放在他那边，常见的远程git仓库有github，gitee</p><ol><li><p>注册github或gitee账号，创建一个远程仓库</p></li><li><p>创建ssh公钥连接<br> (1) 本地git bash输入  <code>ssh-keygen -t rsa</code>  一路回车<br> 表示生成一个公钥对<br> (2) 本地git bash输入  <code>cat ~/.ssh/id_rsa.pub</code><br> 复制公钥然后粘贴添加至github或gitee个人设置公钥中<br> (3) 本地git bash输入<code>ssh -T git@gitee.com</code><br> 表示与远程服务器创立连接<br> (4) 本地git bash 输入 <code>git remote add</code> 远程仓库名 “仓库地址”<br> 表示添加远程仓库，并给其取名，地址可以在创建的仓库中查看</p></li><li><p><code>git clone &quot;仓库地址&quot;</code><br> 表示将远程的仓库代码复制到本地,一般只在创建本地仓库时使用一次，后续想跟踪远程仓库的代码修改情况只需要</p></li><li><p><code>git fetch 远程仓库名 分支名</code><br> 将远程仓库的分支抓取到本地，但不进行合并</p></li><li><p><code>git pull 远程仓库名 分支名</code><br> 将远程仓库的分支抓取到本地，再进行merge合并</p></li><li><p><code>git push 远程仓库名 本地分支名:远程分支名</code><br> 表示将本地分支推送到远程仓库的分支将二者合并，注意push时可能会产生冲突，假如你与他人协同开发，其他人已经先修改某行代码并先push了，你也修改了那行代码，则可能尝试冲突，所以push前一般需要先pull拉取修改情况，如果本地产生冲突，再在本地解决冲突再提交。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研高等数学:快速计算函数的不可导点个数</title>
    <link href="/2023/09/01/%E8%80%83%E7%A0%94%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E5%BF%AB%E9%80%9F%E8%AE%A1%E7%AE%97%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%AF%BC%E7%82%B9%E4%B8%AA%E6%95%B0/"/>
    <url>/2023/09/01/%E8%80%83%E7%A0%94%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E5%BF%AB%E9%80%9F%E8%AE%A1%E7%AE%97%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%AF%BC%E7%82%B9%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/2023.9.1/8110264081f2ffb197782e181d6fefa.jpg"><br><img src="/../images/2023.9.1/15c32f81e68e1717326fa6514a4cf05.jpg"> </p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
      <category>高等数学</category>
      
      <category>导数与微分</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>不可导点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研高等数学:反常积分的省敛法</title>
    <link href="/2023/09/01/%E8%80%83%E7%A0%94%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86%E7%9A%84%E7%9C%81%E6%95%9B%E6%B3%95/"/>
    <url>/2023/09/01/%E8%80%83%E7%A0%94%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86%E7%9A%84%E7%9C%81%E6%95%9B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/2023.9.1/4c73405c951a089703fa822fc4deacd.jpg"><br><img src="/../images/2023.9.1/8391227618eb669546cd6b4ecf9e4f3.jpg"><br><img src="/../images/2023.9.1/46b9979d848615b5e54fd4fd1612b22.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
      <category>高等数学</category>
      
      <category>积分</category>
      
      <category>反常积分</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>反常积分</tag>
      
      <tag>省敛法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研线性代数:求矩阵A的n次方</title>
    <link href="/2023/08/31/%E8%80%83%E7%A0%94%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E6%B1%82%E7%9F%A9%E9%98%B5A%E7%9A%84n%E6%AC%A1%E6%96%B9/"/>
    <url>/2023/08/31/%E8%80%83%E7%A0%94%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E6%B1%82%E7%9F%A9%E9%98%B5A%E7%9A%84n%E6%AC%A1%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<p><img src="/../images/23.8.31/1198ff411791a570fc7bb5fb0f6ce6e.jpg"><br><img src="/../images/23.8.31/5da6029ec2a2eaa706ca6712f4822f2.jpg"><br><img src="/../images/23.8.31/7fac40dc96a1c67b653694c6d0d110b.jpg"> </p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
      <category>线性代数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性代数</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2023/04/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2023/04/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><p> 动态规划（Dynamic Programming）是求解决策过程最优化的过程。它通过把原问题拆解成若干子问题，并保存子问题的结果以便重复利用，从而避免了重复计算，达到优化的目的。动态规划通常用于有重叠的子问题和最优子结构性质的优化问题。</p><p> 动态规划可以解决很多经典的问题，如背包问题、找零钱问题、最长公共子序列问题等等。 但是，动态规划也有一些缺点，例如时间和空间复杂度高，难以处理连续区间问题等。因此，在使用动态规划时，需要衡量问题的特征和时间、空间复杂度的代价。</p><h2 id="二-基本逻辑（步骤）"><a href="#二-基本逻辑（步骤）" class="headerlink" title="二. 基本逻辑（步骤）"></a>二. 基本逻辑（步骤）</h2><ol><li>定义状态：将原问题拆解成若干子问题，定义状态表示这些子问题的解。</li><li>定义状态转移方程：根据子问题之间的关系，定义<strong>状态转移方程</strong>，以递推的形式计算子问题的解。</li><li>确定边界条件：确定状态转移方程的边界条件，即基本问题的解。</li><li>自底向上计算：按照递推式自底向上计算状态，得到原问题的解。</li></ol><h2 id="三-模板"><a href="#三-模板" class="headerlink" title="三. 模板"></a>三. 模板</h2><p>动态规划的关键在于列出状态转移方程，具体的状态转移方程随实际问题不同，一旦列出状态转移方程则问题就基本解决了。</p><p>如对于斐波那契数列，其状态转移方程为：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">######################################</span><br><span class="line">    f(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">    f(<span class="number">2</span>) = <span class="number">1</span></span><br><span class="line">    f(n) = f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>)</span><br><span class="line">#########################################</span><br><span class="line">    #伪代码实现：</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(n)</span></span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">        fib = array of <span class="built_in">length</span> n+<span class="number">1</span></span><br><span class="line">        fib[<span class="number">0</span>] = <span class="number">0</span>, fib[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> from <span class="number">2</span> to n</span><br><span class="line">            fib[<span class="built_in">i</span>] = fib[<span class="built_in">i</span><span class="number">-1</span>] + fib[<span class="built_in">i</span><span class="number">-2</span>]</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">return</span> fib[n]</span><br><span class="line">    <span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure><h2 id="四-示例"><a href="#四-示例" class="headerlink" title="四. 示例"></a>四. 示例</h2><p>以下是Leetcode第70题</p><ol start="70"><li>爬楼梯</li></ol><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>示例 1：</p><p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################思路############################</span></span><br><span class="line"><span class="comment">#    假设dp(n)代表爬到第n阶的方法数</span></span><br><span class="line"><span class="comment">#    显然dp(n) = dp(n-1) + dp(n-2)</span></span><br><span class="line"><span class="comment">#    因为第n阶只能由第n-1阶向上跳一阶或第n-2阶向上跳2阶</span></span><br><span class="line"><span class="comment">#    又显然dp(1) = 1  dp(2) = 2</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################代码############################</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> climbStairs(n-<span class="number">1</span>) + climbStairs(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>最优化算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>优化算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广度优先搜索</title>
    <link href="/2023/03/31/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2023/03/31/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><p>  广度优先搜索（Breadth-First Search，BFS）是一种图搜索算法，其基本思想是从起始节点开始逐层扩展，先访问离起始节点近的节点，然后扩展到距离更远的节点，直到遍历完所有可达的节点。在BFS中，使用队列数据结构来保存待访问节点，使得所有按照广度遍历到的节点都会先于深度贝遍历到的节点被访问。</p><h2 id="二-基本逻辑（步骤）"><a href="#二-基本逻辑（步骤）" class="headerlink" title="二. 基本逻辑（步骤）"></a>二. 基本逻辑（步骤）</h2><p><strong>广度优先搜索的主要步骤如下</strong></p><ol><li>选择一个起始节点，并标志为已访问；</li><li>将起始节点加入队列；</li><li>从队列中取出一个节点，并访问它的未被访问的邻居节点，将这些邻居节点标记为已访问，并加入到队列中；</li><li>重复步骤3，直到队列为空。</li></ol><p>需要注意的是，在进行BFS时，同样需要记录已经访问过的节点，以避免重复遍历同一节点。</p><p>BFS算法的时间复杂度为O(|V|+|E|)，其中|V|和|E|分别表示图中节点数和边数，空间复杂度则为O(|V|)，因为需要存储队列和已访问节点标志。BFS广泛应用于社交网络分析、路径规划、迷宫等方面。</p><h2 id="三-基本模板-伪代码"><a href="#三-基本模板-伪代码" class="headerlink" title="三. 基本模板(伪代码)"></a>三. 基本模板(伪代码)</h2><ol><li><p>如果不需要确定当前遍历到了哪一层，BFS 模板如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> queue 不空：</span><br><span class="line">    cur = queue.pop()</span><br><span class="line">    <span class="keyword">for</span> 节点 <span class="keyword">in</span> cur的所有相邻节点：</span><br><span class="line">        <span class="keyword">if</span> 该节点有效且未访问过：</span><br><span class="line">            queue.push(该节点)</span><br></pre></td></tr></table></figure></li><li><p>如果要确定当前遍历到了哪一层，BFS 模板如下。 这里增加了 level 表示当前遍历到二叉树中的哪一层了，也可以理解为在一个图中，现在已经走了多少步了。size 表示在当前遍历层有多少个元素，也就是队列中的元素数，我们把这些元素一次性遍历完，即把当前层的所有元素都向外走了一步。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">level = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> queue 不空：</span><br><span class="line">    size = queue.size()</span><br><span class="line">    <span class="keyword">while</span> (size --) &#123;</span><br><span class="line">        cur = queue.pop()</span><br><span class="line">        <span class="keyword">for</span> 节点 <span class="keyword">in</span> cur的所有相邻节点：</span><br><span class="line">            <span class="keyword">if</span> 该节点有效且未被访问过：</span><br><span class="line">                queue.push(该节点)</span><br><span class="line">    &#125;</span><br><span class="line">    level += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="四-示例"><a href="#四-示例" class="headerlink" title="四. 示例"></a>四. 示例</h2><p>这是Leetcode第994题：</p><pre><code>994. 腐烂的橘子在给定的 m x n 网格 grid 中，每个单元格可以有以下三个值之一：    值 0 代表空单元格；    值 1 代表新鲜橘子；    值 2 代表腐烂的橘子。每分钟，腐烂的橘子 周围 4 个方向上相邻 的新鲜橘子都会腐烂。返回 直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1 。</code></pre><p><img src="/../images/23.3.31/1680268007387.jpg"> </p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">####################思路############################</span></span><br><span class="line"><span class="comment">#    将每个腐烂的橘子入队</span></span><br><span class="line"><span class="comment">#    对每个腐烂的橘子进行广度优先搜索</span></span><br><span class="line"><span class="comment">#    记录每次广度优先搜索的层级</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################代码############################</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">orangesRotting</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        m,n = <span class="built_in">len</span>(grid),<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        queue = collections.deque([])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">2</span>:</span><br><span class="line">                    queue.append((i,j))</span><br><span class="line">        <span class="comment">#下面这一段就是广度优先搜索的主体##################</span></span><br><span class="line">        dire = [(<span class="number">1</span>,<span class="number">0</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,-<span class="number">1</span>)]</span><br><span class="line">        step = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            step+=<span class="number">1</span></span><br><span class="line">            size = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line"></span><br><span class="line">                current = queue.popleft()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> dire:</span><br><span class="line">                    <span class="comment">#以下一长串是判断是否坐标出界或已访问的</span></span><br><span class="line">                    <span class="keyword">if</span> current[<span class="number">0</span>]+i[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> current[<span class="number">0</span>]+i[<span class="number">0</span>]&gt;=m <span class="keyword">or</span> current[<span class="number">1</span>]+i[<span class="number">1</span>]&lt;<span class="number">0</span> <span class="keyword">or</span> current[<span class="number">1</span>]+i[<span class="number">1</span>] &gt;= n <span class="keyword">or</span> grid[current[<span class="number">0</span>]+i[<span class="number">0</span>]][current[<span class="number">1</span>]+i[<span class="number">1</span>]]==<span class="number">0</span> <span class="keyword">or</span> grid[current[<span class="number">0</span>]+i[<span class="number">0</span>]][current[<span class="number">1</span>]+i[<span class="number">1</span>]]==<span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        grid[current[<span class="number">0</span>]+i[<span class="number">0</span>]][current[<span class="number">1</span>]+i[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">                        queue.append((current[<span class="number">0</span>]+i[<span class="number">0</span>],current[<span class="number">1</span>]+i[<span class="number">1</span>]))</span><br><span class="line">        <span class="comment">####################################################</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> step == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> step</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>搜索算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>搜索算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度优先搜索</title>
    <link href="/2023/03/31/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <url>/2023/03/31/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><p>  深度优先搜索是一种图遍历算法。深度优先搜索（DFS）是用于遍历或搜索树或图的一种算法。它沿着树的深度遍历树的节点，并尽可能深入搜索树的分支。当一个节点的所有子节点都被探索过，搜索过程将回溯到该节点的起始点，继续搜索下一个未被探索的节点。</p><h2 id="二-基本逻辑（步骤）"><a href="#二-基本逻辑（步骤）" class="headerlink" title="二. 基本逻辑（步骤）"></a>二. 基本逻辑（步骤）</h2><p><strong>深度优先搜索的主要步骤如下</strong></p><ol><li>选择一个起始节点，并标记为已访问；</li><li>访问当前节点的邻居节点，如果邻居节点没有被访问过，就将其标记为已访问，并递归遍历邻居节点；</li><li>当当前节点没有未访问的邻居节点时，回溯到上一层节点；</li><li>重复2和3步骤，直到遍历完所有的节点。</li></ol><p>在实现深度优先搜索时，通常使用栈结构来保存待访问节点，使算法能够回溯回到之前的状态。这种实现方式称为迭代式深度优先搜索（Iterative Deepening Depth-First Search，IDDFS），它是深度优先搜索的一个变体。</p><p>需要注意的是，深度优先搜索对于环路很容易陷入死循环，因此需要<strong>在遍历时记录已访问的节点信息</strong>，防止重复访问同一个节点。</p><p>鉴于深度优先搜索的特性，通常用递归实现。</p><h2 id="三-基本模板-伪代码"><a href="#三-基本模板-伪代码" class="headerlink" title="三. 基本模板(伪代码)"></a>三. 基本模板(伪代码)</h2><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">node</span>)</span><br><span class="line">    <span class="comment"># 如果当前节点未访问则标记为已访问</span></span><br><span class="line">    <span class="keyword">if</span> node.visited == false then</span><br><span class="line">        mark node <span class="keyword">as</span> visited</span><br><span class="line">        <span class="comment"># 将每个邻居依次设为搜索起点</span></span><br><span class="line">        <span class="keyword">for</span> each neighbor <span class="keyword">in</span> node.neighbors do</span><br><span class="line">            DFS(neighbor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化每个节点为未访问过状态</span></span><br><span class="line">initialize visited flag <span class="keyword">for</span> <span class="built_in">all</span> nodes to false</span><br><span class="line">DFS(start_node)</span><br></pre></td></tr></table></figure></code></pre><h2 id="四-示例"><a href="#四-示例" class="headerlink" title="四. 示例"></a>四. 示例</h2><p>这是Leetcode第695题：</p><pre><code>695. 岛屿的最大面积给你一个大小为 m x n 的二进制矩阵 grid 。岛屿 是由一些相邻的 1 (代表土地) 构成的组合，这里的「相邻」要求两个 1 必须在 水平或者竖直的四个方向上 相邻。你可以假设 grid 的四个边缘都被 0（代表水）包围着。岛屿的面积是岛上值为 1 的单元格的数目。计算并返回 grid 中最大的岛屿面积。如果没有岛屿，则返回面积为 0 </code></pre><p><img src="/../images/23.3.31/1680260721398.jpg"> </p><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################思路############################</span></span><br><span class="line"><span class="comment">#    对每个孤立的岛屿进行深度优先搜索</span></span><br><span class="line"><span class="comment">#    记录每次深度优先搜索的岛屿的面积</span></span><br><span class="line"><span class="comment">#    维护一个记录最大面积的变量</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################代码############################</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxAreaOfIsland</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 用来存储坐标是否访问过的矩阵</span></span><br><span class="line">        grid_copy = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>]))] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i,j</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> area</span><br><span class="line">            <span class="comment"># 如果坐标不合法或已访问则直接返回</span></span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="built_in">len</span>(grid) <span class="keyword">or</span> i&lt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> j&gt;=<span class="built_in">len</span>(grid[<span class="number">0</span>]) <span class="keyword">or</span> j&lt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> grid[i][j] == <span class="number">0</span> <span class="keyword">or</span> grid_copy[i][j]==<span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#如果符合条件则岛屿面积加一并依次搜索上下左右四个邻居</span></span><br><span class="line">            area += <span class="number">1</span></span><br><span class="line">            grid_copy[i][j]=<span class="number">2</span></span><br><span class="line">            dire = [(<span class="number">1</span>,<span class="number">0</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,-<span class="number">1</span>)]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dire:</span><br><span class="line">                dfs(i+k[<span class="number">0</span>],j+k[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">                <span class="comment">#遍历每个孤立的岛屿</span></span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">1</span> <span class="keyword">and</span> grid_copy != <span class="number">2</span>:</span><br><span class="line">                    area = <span class="number">0</span></span><br><span class="line">                    dfs(i,j)</span><br><span class="line">                    res = <span class="built_in">max</span>(res,area)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>搜索算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>搜索算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>esp移植LVGL</title>
    <link href="/2022/11/07/esp-%E7%A7%BB%E6%A4%8Dlvgl/"/>
    <url>/2022/11/07/esp-%E7%A7%BB%E6%A4%8Dlvgl/</url>
    
    <content type="html"><![CDATA[<h2 id="一-LVGL简介"><a href="#一-LVGL简介" class="headerlink" title="一. LVGL简介"></a>一. LVGL简介</h2><ul><li>LVGL (Light and Versatile Graphics Library) is a free and open-source graphics library providing everything you need to create an embedded GUI with easy-to-use graphical elements, beautiful visual effects and a low memory footprint.</li><li>以上是官方文档对LVGL（轻量的多功能的图形库）的介绍，简单说就是一个轻量，开源，免费的图形库，能让你很方便地做出漂亮的GUI。</li><li>LVGL支持很多MCU和屏幕驱动，具体介绍建议查看LVGL官方文档，这里就不赘述了。</li><li><a href="https://docs.lvgl.io/">LVGL官方文档</a></li></ul><h2 id="二-环境"><a href="#二-环境" class="headerlink" title="二. 环境"></a>二. 环境</h2><ol><li>硬件：<ul><li>tft显示屏</li><li>esp开发板(由于我手头只有nodemcu，故此次以nodemcu为例)</li></ul></li><li>软件<ul><li>vscode + platformio(也可以是arduino)</li></ul></li></ol><h2 id="三-TFT屏幕显示"><a href="#三-TFT屏幕显示" class="headerlink" title="三. TFT屏幕显示"></a>三. TFT屏幕显示</h2><ul><li>屏幕显示部分前面已发过教程，不懂的去观看前面的博客，这里就不赘述了。</li></ul><h2 id="四-LVGL移植"><a href="#四-LVGL移植" class="headerlink" title="四. LVGL移植"></a>四. LVGL移植</h2><ol><li>在platformio中新建工程，根据自己需要选择开发板和开发框架，比如我选择的是nodemcu1.0和arduino</li><li>在libraries中搜索lvgl并添加到工程,如果以后经常用到的话可以待添加成功后将lvgl文件夹整个复制到platformio的全局库路径中<br><img src="/../images/11.7/1667825078577.png"></li><li>由platformio添加到工程的库的路径为.pio&#x2F;libdeps&#x2F;(board_name)&#x2F;，将lvgl中的lv_conf_template.h复制并粘贴到lvgl的同级目录中，并改名为lv_conf.h</li><li>打开lv_conf.h根据自己的需要进行修改</li></ol><ul><li>一般来说修改颜色深度和内存空间即可，如以下修改颜色深度为16  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*====================</span></span><br><span class="line"><span class="comment">COLOR SETTINGS</span></span><br><span class="line"><span class="comment">*====================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Color depth: 1 (1 byte per pixel), 8 (RGB332), 16 (RGB565), 32 (ARGB8888)*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LV_COLOR_DEPTH 16</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="五-lvgl初始化介绍"><a href="#五-lvgl初始化介绍" class="headerlink" title="五. lvgl初始化介绍"></a>五. lvgl初始化介绍</h2><ul><li>在写代码之前首先要了解lvgl的初始化过程（来源于官网教程）</li></ul><ol><li>先初始化一个内存缓冲区(lv_disp_draw_buf_t) <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*A static or global variable to store the buffers*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">lv_disp_draw_buf_t</span> disp_buf;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Static or global buffer(s). The second buffer is optional*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">lv_color_t</span> buf_1[MY_DISP_HOR_RES * <span class="number">10</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">lv_color_t</span> buf_2[MY_DISP_HOR_RES * <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Initialize `disp_buf` with the buffer(s). With only one buffer use NULL instead buf_2 */</span></span><br><span class="line">lv_disp_draw_buf_init(&amp;disp_buf, buf_1, buf_2, MY_DISP_HOR_RES*<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li>初始化一个显示驱动 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">lv_disp_drv_t</span> disp_drv;          <span class="comment">/*A variable to hold the drivers. Must be static or global.*/</span></span><br><span class="line">lv_disp_drv_init(&amp;disp_drv);            <span class="comment">/*Basic initialization*/</span></span><br><span class="line">disp_drv.draw_buf = &amp;disp_buf;          <span class="comment">/*Set an initialized buffer*/</span></span><br><span class="line">disp_drv.flush_cb = my_flush_cb;        <span class="comment">/*Set a flush callback to draw to the display*/</span></span><br><span class="line">disp_drv.hor_res = <span class="number">320</span>;                 <span class="comment">/*Set the horizontal resolution in pixels*/</span></span><br><span class="line">disp_drv.ver_res = <span class="number">240</span>;                 <span class="comment">/*Set the vertical resolution in pixels*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">lv_disp_t</span> * disp;</span><br><span class="line">disp = lv_disp_drv_register(&amp;disp_drv); <span class="comment">/*Register the driver and save the created display objects*/</span></span><br></pre></td></tr></table></figure></li><li>注意上面有一个disp_drv.flush_cb &#x3D; my_flush_cb,这里的my_flush_cb是一个回调函数，是为了实现lvgl调用绘制屏幕的接口，是需要我们自己实现的，比如我是这么实现的： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Display flushing  回调函数，使lvgl可以使用tft接口*/</span>      </span><br><span class="line"><span class="type">void</span> <span class="title function_">my_disp_flush</span><span class="params">( <span class="type">lv_disp_drv_t</span> *disp, <span class="type">const</span> <span class="type">lv_area_t</span> *area, <span class="type">lv_color_t</span> *color_p )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> w = ( area-&gt;x2 - area-&gt;x1 + <span class="number">1</span> );</span><br><span class="line">    <span class="type">uint32_t</span> h = ( area-&gt;y2 - area-&gt;y1 + <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    tft.startWrite();</span><br><span class="line">    tft.setAddrWindow( area-&gt;x1, area-&gt;y1, w, h );</span><br><span class="line">    tft.pushColors( ( <span class="type">uint16_t</span> * )&amp;color_p-&gt;full, w * h, <span class="literal">true</span> );</span><br><span class="line">    tft.endWrite();</span><br><span class="line">    <span class="comment">//上面的代码就是使用tft的接口在指定矩形区域绘制图形（将指定数据输入指定显存）</span></span><br><span class="line"></span><br><span class="line">    lv_disp_flush_ready( disp );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="六-写代码，编译下载"><a href="#六-写代码，编译下载" class="headerlink" title="六. 写代码，编译下载"></a>六. 写代码，编译下载</h2><ol><li>最终测试代码如下：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lvgl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TFT_eSPI.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> screenWidth  = <span class="number">128</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> screenHeight = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">lv_disp_draw_buf_t</span> draw_buf;</span><br><span class="line"><span class="type">static</span> <span class="type">lv_color_t</span> buf[ screenWidth * <span class="number">10</span> ];</span><br><span class="line"></span><br><span class="line">TFT_eSPI tft = TFT_eSPI(screenWidth, screenHeight); <span class="comment">/* TFT instance */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LV_USE_LOG != 0</span></span><br><span class="line"><span class="comment">/* Serial debugging */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * buf)</span></span><br><span class="line">&#123;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(buf);</span><br><span class="line">    Serial.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Display flushing */</span></span><br><span class="line"><span class="comment">//回调函数，使lvgl可以使用tft接口</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_disp_flush</span><span class="params">( <span class="type">lv_disp_drv_t</span> *disp, <span class="type">const</span> <span class="type">lv_area_t</span> *area, <span class="type">lv_color_t</span> *color_p )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> w = ( area-&gt;x2 - area-&gt;x1 + <span class="number">1</span> );</span><br><span class="line">    <span class="type">uint32_t</span> h = ( area-&gt;y2 - area-&gt;y1 + <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    tft.startWrite();</span><br><span class="line">    tft.setAddrWindow( area-&gt;x1, area-&gt;y1, w, h );</span><br><span class="line">    tft.pushColors( ( <span class="type">uint16_t</span> * )&amp;color_p-&gt;full, w * h, <span class="literal">true</span> );</span><br><span class="line">    tft.endWrite();</span><br><span class="line">    <span class="comment">//上面的代码就是使用tft的接口在指定矩形区域绘制图形（将指定数据输入指定显存）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    lv_disp_flush_ready( disp );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Serial.begin( <span class="number">115200</span> ); <span class="comment">/* prepare for possible serial debug */</span></span><br><span class="line"></span><br><span class="line">    String LVGL_Arduino = <span class="string">&quot;Hello LVGL! &quot;</span>;</span><br><span class="line">    <span class="comment">// LVGL_Arduino += String(&#x27;V&#x27;) + lv_version_major() + &quot;.&quot; + lv_version_minor() + &quot;.&quot; + lv_version_patch();</span></span><br><span class="line"></span><br><span class="line">    Serial.println( LVGL_Arduino );</span><br><span class="line">    Serial.println( <span class="string">&quot;I am LVGL_Arduino&quot;</span> );</span><br><span class="line"></span><br><span class="line">    lv_init();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> LV_USE_LOG != 0</span></span><br><span class="line">    lv_log_register_print_cb( my_print ); <span class="comment">/* register print function for debugging */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    tft.begin();          <span class="comment">/* TFT init */</span></span><br><span class="line">    tft.setRotation( <span class="number">3</span> ); <span class="comment">/* Landscape orientation, flipped */</span></span><br><span class="line"></span><br><span class="line">    lv_disp_draw_buf_init( &amp;draw_buf, buf, <span class="literal">NULL</span>, screenWidth * <span class="number">10</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Initialize the display*/</span></span><br><span class="line">    <span class="type">static</span> <span class="type">lv_disp_drv_t</span> disp_drv;      <span class="comment">//实例化一个显示驱动</span></span><br><span class="line">    lv_disp_drv_init( &amp;disp_drv );        <span class="comment">//初始化</span></span><br><span class="line">    <span class="comment">/*Change the following line to your display resolution*/</span></span><br><span class="line">    disp_drv.hor_res = screenWidth;    <span class="comment">//水平像素</span></span><br><span class="line">    disp_drv.ver_res = screenHeight;    <span class="comment">//垂直像素</span></span><br><span class="line">    disp_drv.flush_cb = my_disp_flush;   <span class="comment">//回调函数,实现将数据刷入屏幕</span></span><br><span class="line">    disp_drv.draw_buf = &amp;draw_buf;   </span><br><span class="line">    lv_disp_drv_register( &amp;disp_drv );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">    <span class="comment">/* Create simple label */</span></span><br><span class="line">    <span class="type">lv_obj_t</span> *label = lv_label_create( lv_scr_act() );</span><br><span class="line">    lv_label_set_text( label, LVGL_Arduino.c_str() );</span><br><span class="line">    lv_obj_align( label, LV_ALIGN_CENTER, <span class="number">0</span>, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    Serial.println( <span class="string">&quot;Setup done&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    lv_timer_handler(); <span class="comment">/* let the GUI do its work */</span></span><br><span class="line">    delay( <span class="number">5</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译并下载</li><li>最终效果如下<br><img src="/../images/11.7/7d1f3b707783620342cee83d6ea0510.jpg"></li></ol>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
      <category>esp8266</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esp8266</tag>
      
      <tag>tft显示屏</tag>
      
      <tag>LVGL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开发操作系统（二）</title>
    <link href="/2022/11/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/11/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一. 环境搭建"></a>一. 环境搭建</h2><ul><li>接下来将进行最小操作系统的编写，在屏幕上显示Hello,OS World。</li><li>所需环境：<ol><li>Oracle virtual box(或vmware) ：虚拟机</li><li>Nasm ： 汇编编译</li><li>Notepad++ : 编辑器，也可以使用记事本</li></ol></li></ul><h2 id="二-制作虚拟磁盘"><a href="#二-制作虚拟磁盘" class="headerlink" title="二. 制作虚拟磁盘"></a>二. 制作虚拟磁盘</h2><ul><li>由于使用真实的电脑和磁盘来进行太麻烦了，于是我们选用虚拟磁盘和虚拟机的方式来实现。</li></ul><ol><li>打开cmd输入diskpart进入diskpart模式</li><li>在diskpart模式下输入 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISKPART&gt; create vdisk file=f:\myvdisk.vhd maximum=10 type=fixed</span><br></pre></td></tr></table></figure></li></ol><ul><li>以上表示创建一个虚拟硬盘 ，大小为10M，大小固定。</li></ul><h2 id="三-用汇编写启动程序"><a href="#三-用汇编写启动程序" class="headerlink" title="三. 用汇编写启动程序"></a>三. 用汇编写启动程序</h2><ol><li><p>创建一个文件boot.asm</p></li><li><p>写入以下代码：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    org07c00h; 告诉编译器程序加载到7c00处</span><br><span class="line">    movax, cs</span><br><span class="line">    movds, ax</span><br><span class="line">    moves, ax</span><br><span class="line">    callDispStr; 调用显示字符串例程</span><br><span class="line">    jmp$; 无限循环</span><br><span class="line">DispStr:</span><br><span class="line">    movax, BootMessage</span><br><span class="line">    movbp, ax; ES:BP = 串地址</span><br><span class="line">    movcx, 16; CX = 串长度</span><br><span class="line">    movax, 01301h; AH = 13,  AL = 01h</span><br><span class="line">    movbx, 000ch; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)</span><br><span class="line">    movdl, 0</span><br><span class="line">    int10h; 10h 号中断</span><br><span class="line">    ret</span><br><span class="line">BootMessage:db&quot;Hello, OS world!&quot;</span><br><span class="line">times 510-($-$$)db0; 填充剩下的空间，使生成的二进制代码恰好为512字节</span><br><span class="line">dw 0xaa55; 结束标志</span><br></pre></td></tr></table></figure></li><li><p>编译生成二进制文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nasm boot.asm -o boot.bin</span><br></pre></td></tr></table></figure></li><li><p>将二进制文件写入虚拟磁盘</p></li></ol><ul><li>在linux下可以使用dd命令实现，但windows下没有这个命令，可以去网上找dd.exe可执行程序或者其他方法，这里使用dd.exe操作。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=boot.bin of=f:\myvdisk.vhd bs=512 count=1</span><br></pre></td></tr></table></figure></li><li>以上命令将boot.bin写入myvdisk.vhd</li></ul><h2 id="四-virtual-box里创建虚拟机"><a href="#四-virtual-box里创建虚拟机" class="headerlink" title="四. virtual box里创建虚拟机"></a>四. virtual box里创建虚拟机</h2><ol><li>新建虚拟机，名称路径随意，最好不要有中文，类型和版本都选other，点击下一步</li><li>内存默认4M即可，点击下一步</li><li>选择使用已有的虚拟硬盘,然后将前面创建的虚拟磁盘注册进去，点击创建</li></ol><h2 id="五-启动虚拟机"><a href="#五-启动虚拟机" class="headerlink" title="五. 启动虚拟机"></a>五. 启动虚拟机</h2><ul><li>启动虚拟机，可以看到屏幕上显示红色的 Hello, OS World!<br><img src="/../images/11.5/1667662896156.png"></li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开发操作系统（一）</title>
    <link href="/2022/11/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/11/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一-计算机开机过程"><a href="#一-计算机开机过程" class="headerlink" title="一. 计算机开机过程"></a>一. 计算机开机过程</h2><ul><li>在学习操作系统之前，我们得先知道计算机在启动到显示一个桌面这个过程都做了什么?</li><li>当计算机启动时，它会先执行BIOS，然后进行加电自检（POST），最后再从某一个盘中启动操作系统。</li></ul><ol><li><p>BIOS：即<strong>基本输入输出系统</strong>，BIOS是直接与硬件打交道的底层代码，它为操作系统提供了控制硬件设备的基本功能。BIOS一般被存放在ROM(只读存储芯片)之中，即使在关机或掉电以后，这些代码也不会消失。</p></li><li><p>POST：加电自检又称为引导自我检测（Power-OnSelf-Test；POST），是计算机BIOS的一个功能，在引导后会运行，针对计算机硬件如CPU、主板、存储器等进行检测，结果会显示在固件可以控制的输出接口，像显示屏、LED、打印机等等设备上。加电自检的检查速度极快，甚至感受不到它的存在。</p></li></ol><h2 id="二-启动操作系统的规则"><a href="#二-启动操作系统的规则" class="headerlink" title="二. 启动操作系统的规则"></a>二. 启动操作系统的规则</h2><ul><li>上面我们提到计算机在启动后执行一系列操作，最后再从启动盘（可以是软盘，硬盘，光盘）中加载操作系统。显然计算机要加载操作系统，那么这个操作系统必须要有特定的格式，不是任意一个盘里的数据都能当成操作系统启动的。</li></ul><ol><li>以软盘为例，如果计算机从软盘启动，那么计算机会开始检查软盘的0面0磁道1扇区（一共512个字节），如果发现它以0xAA55结尾的话，那么BIOS会认为它是一个引导扇区，也就是Boot Sector。</li><li>一旦BIOS发现Boot Sector，就会将这512B的内容装载到内存的0000：7c00除，然后跳转到0000：7c00处将控制权交给这段引导码。相当于进入了操作系统。</li></ol><ul><li>上面提到的0xAA55与0000:7c00不必知道由来，只要知道有这么个规则即可。</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><pre><code>上面我们介绍了计算机在加载操作系统前执行的操作以及加载操作系统的一些规则，下次将学习如何编写一个最小的操作系统以及在虚拟机上运行操作系统。</code></pre>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加法器原理</title>
    <link href="/2022/08/22/%E5%8A%A0%E6%B3%95%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <url>/2022/08/22/%E5%8A%A0%E6%B3%95%E5%99%A8%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="加法器原理"><a href="#加法器原理" class="headerlink" title="加法器原理"></a>加法器原理</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><ol><li>加法器，顾名思意就是实现加法运算的一个装置，在计算机中，加法器是最基本的运算装置，因为<strong>在计算机中减法，乘法，除法都可以转化为加法</strong>。</li><li>加法器分为<strong>半加器</strong>和<strong>全加器</strong>，半加器指的是只包含两个加数作为输入，一个和数和一个进位作为输出，而全加器是在半加器的基础上加上了一个进位作为输入。</li></ol><h2 id="二-实现原理"><a href="#二-实现原理" class="headerlink" title="二. 实现原理"></a>二. 实现原理</h2><h3 id="1-半加器的实现"><a href="#1-半加器的实现" class="headerlink" title="1.半加器的实现"></a>1.半加器的实现</h3><ul><li><p>在计算机中，一切数据都是以二进制形式存储的，那么我们先考虑一下<strong>一位二进制数</strong>的加法运算。<br>  观察以下式子：<br>  0 + 0 &#x3D; 0 0<br>  0 + 1 &#x3D; 0 1<br>  1 + 0 &#x3D; 0 1<br>  1 + 1 &#x3D; 1 0<br>  可以看到对于一位二进制数的加法，有四个部分，一个加数，一个被加数，一个和数，一个进位数：<br>  比如:<br>  1（被加数） + 1（加数）&#x3D; 1（进位数）0（和数）  </p></li><li><p>以下我们把被加数称为A，加数称为B，和数称为S,进位数称为C,将以上四条式子列为真值表</p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>S</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>  可以看到：<br>  只有A和B同时为1时，C才为1，这跟<strong>与</strong>运算是相同的，即：<br>  C &#x3D; A + B<br>  当A和B一个为1一个为0时，S为1，也就是说A和B不一样时，S为1，这跟<strong>异或运算</strong>是一样的，即：<br>  S &#x3D; A ⊕ B<br>  用以下逻辑符号表示为：<br>  <img src="/../images/8.22/1b66064f4a2243fda802928fc073aed9.png">  </p></li><li><p>实际上我们并不关心内部装置是怎么样的，我们只要知道输入什么，会得到怎样的输出即可，于是我们对加法器进行抽象，变成以下简单的样子：<br>  <img src="/../images/8.22/1661171386698.jpg"><br>  这样子，我们就得到了一个只能计算一位二进制数的加法器</p></li></ul><h3 id="2-全加器的实现"><a href="#2-全加器的实现" class="headerlink" title="2.全加器的实现"></a>2.全加器的实现</h3><ul><li>事实上，我们上面得到的加法器只有四个口，一个加数，一个被加数，一个和数，一个进位数，这样的加法器是不完善的，我们称之为半加器。</li><li>假设我们现在想实现一个加法器能够接收<strong>来自低位的进位</strong>，那么我们就需要第三个输入端，这样的加法器称为全加器。以下来自低位的进位称为C’,列出真值表：<table><thead><tr><th>A</th><th>B</th><th>C’</th><th>C</th><th>S</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table>  这个真值表分析起来有点复杂，这里直接说结论，可以直接用两个半加器和一个或元件达成这个逻辑，即：<br>  <img src="/../images/8.22/1661173291532.jpg"></li><li>同样的，我们并不关心内部装置是怎么样的，我们只要知道输入什么，会得到怎样的输出即可，于是我们对这个全加法器进行抽象，变成以下简单的样子：<br>  <img src="/../images/8.22/1661173442495.jpg"></li></ul><h3 id="3-多位二进制数加法的实现"><a href="#3-多位二进制数加法的实现" class="headerlink" title="3. 多位二进制数加法的实现"></a>3. 多位二进制数加法的实现</h3><ul><li>上面我们虽然实现了半加器和全加器，但无论是半加器还是全加器，二者都只能计算一位二进制的加法。但是全加器可以接收来自低位的进位，因此我们可以将多个全加器串联起来，实现多位二进制数的加法。</li><li>如下我们把八个全加器串联起来，就能实现八位二进制数的加法运算了：<br><img src="/../images/8.22/1661175155643.jpg"><br>注意最低为的进位输入端我们给它置零，因为其不会有接收来自低位进位的情况。  </li><li>通过以上的分析，我们实现了一个八位二进制数的加法器，同样的如果我们将16个全加器串联起来，就可以计算十六位二进制数了。</li><li>虽然我们串联8个全加器可以计算八位二进制数的加法，但同样的计算时间也会变为8倍，但这对于人来说还是很快的，只要输入立马就能得到输出。不过也有其他的优化方法可以减少运算时间，此处不做讨论。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数字逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字逻辑</tag>
      
      <tag>微机原理</tag>
      
      <tag>CPU</tag>
      
      <tag>加法器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8266nodemcu+tft显示屏显示图片</title>
    <link href="/2022/08/10/8266nodemcu-tft%E6%98%BE%E7%A4%BA%E5%B1%8F%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
    <url>/2022/08/10/8266nodemcu-tft%E6%98%BE%E7%A4%BA%E5%B1%8F%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="8266nodemcu-tft显示屏显示图片"><a href="#8266nodemcu-tft显示屏显示图片" class="headerlink" title="8266nodemcu+tft显示屏显示图片"></a>8266nodemcu+tft显示屏显示图片</h1><h2 id="一-开发环境"><a href="#一-开发环境" class="headerlink" title="一. 开发环境"></a>一. 开发环境</h2><ol><li>vscode + platformio</li><li>硬件: nodemcu，TFT显示屏</li></ol><hr><h2 id="二-开发前准备"><a href="#二-开发前准备" class="headerlink" title="二. 开发前准备"></a>二. 开发前准备</h2><ol><li><p>引脚连接  </p><table><thead><tr><th>TFT</th><th>ESP8266</th></tr></thead><tbody><tr><td>DI(MOSI)</td><td>D7</td></tr><tr><td>SC(SCLK.SCK)</td><td>D5</td></tr><tr><td>CS</td><td>D8</td></tr><tr><td>RST</td><td>D4、RST</td></tr><tr><td>RS(DC、A0)</td><td>D3</td></tr><tr><td>BLK&amp;VCC</td><td>3.3V</td></tr><tr><td>GND</td><td>GND</td></tr></tbody></table></li><li><p>创建工程并添加库<br> 在platformio中的library里搜索TFT_eSPI并添加到工程，如果以后经常用到的话可以等库添加完后手动复制到platformio的全局库路径中。<br> <img src="/../images/8.10/1660135109175.jpg"></p></li><li><p>修改设置<br>打开TFT_eSPI里的User_Setup.h文件，对里面的一些宏定义进行修改，比如我的TFT是ST7735芯片驱动，我就需要将相关宏定义打开，并将其他宏定义注释掉</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#define ILI9341_DRIVER       // Generic driver for common displays</span></span><br><span class="line"><span class="comment">//#define ILI9341_2_DRIVER     // Alternative ILI9341 driver, see https://github.com/Bodmer/TFT_eSPI/issues/1172</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ST7735_DRIVER      <span class="comment">// Define additional parameters below for this display</span></span></span><br><span class="line"><span class="comment">//#define ILI9163_DRIVER     // Define additional parameters below for this display</span></span><br><span class="line"><span class="comment">//#define S6D02A1_DRIVER</span></span><br></pre></td></tr></table></figure><p>一般来说要修改的除了驱动，还有以下几处(具体根据个人情况修改)：</p></li></ol><ul><li>RGB数据格式：  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  #define TFT_RGB_ORDER TFT_RGB  // Colour order Red-Green-Blue</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TFT_RGB_ORDER TFT_BGR  <span class="comment">// Colour order Blue-Green-Red</span></span></span><br></pre></td></tr></table></figure><ul><li>屏幕像素  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For ST7789, ST7735, ILI9163 and GC9A01 ONLY, define the pixel width and height in portrait orientation</span></span><br><span class="line"><span class="comment">// #define TFT_WIDTH  80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TFT_WIDTH  128</span></span><br><span class="line"><span class="comment">// #define TFT_WIDTH  172 // ST7789 172 x 320</span></span><br><span class="line"><span class="comment">// #define TFT_WIDTH  240 // ST7789 240 x 240 and 240 x 320</span></span><br><span class="line"><span class="comment">// #define TFT_HEIGHT 160</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TFT_HEIGHT 128</span></span><br></pre></td></tr></table></figure></li></ul></li><li>引脚配置<br>一般默认即可</li><li>字库配置<br>一般默认即可</li><li>SPI通信速率<br>一般默认即可</li></ul><ol start="4"><li>配置完成后先烧录一段简单的程序查看是否能正常运行<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TFT_eSPI.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">TFT_eSPI tft = <span class="built_in">TFT_eSPI</span>(); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  tft.<span class="built_in">begin</span>();</span><br><span class="line">  tft.<span class="built_in">setRotation</span>(<span class="number">0</span>);</span><br><span class="line">  tft.<span class="built_in">fillScreen</span>(TFT_BLACK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tft.<span class="built_in">fillScreen</span>(TFT_GREEN);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    tft.<span class="built_in">fillScreen</span>(TFT_BLUE);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    tft.<span class="built_in">fillScreen</span>(TFT_RED);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="三-制作图片数据"><a href="#三-制作图片数据" class="headerlink" title="三. 制作图片数据"></a>三. 制作图片数据</h2><ol><li>使用位图生成工具即可将图片转换成特定格式的数据，此处以Img2Lcd工具作为示例</li><li>使用工具打开一张图片，修改设置，并将其输出为.h文件<br><img src="/../images/8.10/1660137926662.jpg"><br>输出选择C语言数组，颜色选择16位真彩色，最大宽度和高度根据自己屏幕尺寸设置，颜色排列要跟前面配置User_Setup中的颜色排列一致，还有注意输出图像的尺寸，后面显示图片要使用这个数据。</li><li>保存输出后的图像数据，将其改为.h文件,并稍作修改，如下：<br>修改前 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> gImage_demo_image1[<span class="number">115200</span>] = &#123; <span class="comment">/* 0X10,0X10,0X00,0XF0,0X00,0XF0,0X01,0X1B, */</span></span><br></pre></td></tr></table></figure>修改后 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PROGMEM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROGMEM</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> gImage_demo_image1[<span class="number">115200</span>] PROGMEM = &#123; <span class="comment">/* 0X10,0X10,0X00,0XF0,0X00,0XF0,0X01,0X1B, */</span></span><br></pre></td></tr></table></figure><strong>其中的PROGMEM关键字是为了防止图片数组过大RAM空间不足，将数据存放入FLASH中</strong></li><li>将包含图片数据的.h文件复制进工程中</li></ol><h2 id="四-编写程序"><a href="#四-编写程序" class="headerlink" title="四. 编写程序"></a>四. 编写程序</h2><ol><li>以下是程序示例: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TFT_eSPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;avr/pgmspace.h&gt;</span> <span class="comment">//为了使用PROGMEM关键字</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;map.h&quot;</span>  <span class="comment">//图片数据头文件</span></span></span><br><span class="line"></span><br><span class="line">TFT_eSPI tft = <span class="built_in">TFT_eSPI</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">tft.<span class="built_in">begin</span>();</span><br><span class="line">tft.<span class="built_in">setRotation</span>(<span class="number">0</span>);</span><br><span class="line">tft.<span class="built_in">fillScreen</span>(TFT_BLACK);</span><br><span class="line"></span><br><span class="line">tft.<span class="built_in">pushImage</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">128</span>,(<span class="type">uint16_t</span> *)gImage_map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 其中的pushImage是将FLASH中的16位图片显示出来，第一二个参数是图片起始点，第三四个参数是图片宽和高，注意图片宽高正确，否则可能会显示错误  </li><li>编译并烧录  </li><li>查看运行结果<br><img src="/../images/8.10/7097c5d17edc352940d3869be6a5f84.jpg"></li></ol>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
      <category>esp8266</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esp8266</tag>
      
      <tag>tft显示屏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stm32cube+platformio环境开发</title>
    <link href="/2022/08/08/stm32cube+platformio%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91/"/>
    <url>/2022/08/08/stm32cube+platformio%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="stm32cube-platformio环境开发"><a href="#stm32cube-platformio环境开发" class="headerlink" title="stm32cube+platformio环境开发"></a>stm32cube+platformio环境开发</h1><h2 id="一-所需软件"><a href="#一-所需软件" class="headerlink" title="一. 所需软件"></a>一. 所需软件</h2><ol><li>VScode<br> 下载过程略<br> <a href="https://code.visualstudio.com/">vscode官网</a><br> 建议国内下载</li><li>stm32cubemx<br> 下载过程略<br> <a href="https://www.st.com/">st官网</a><br> 建议国内下载</li><li>platformio<br> 下载好vscode后，直接在左边插件搜索，选择下载量最多的即可，由于是从github下载故下载速度很慢(dddd)<br> 下载好后点击左侧图标即可进入界面<br> <img src="/../images/8.8/1659965131203.jpg"></li></ol><hr><h2 id="二-stm32cubemx创建工程"><a href="#二-stm32cubemx创建工程" class="headerlink" title="二. stm32cubemx创建工程"></a>二. stm32cubemx创建工程</h2><ol><li>打开stm32cubemx，点击file-&gt;new project,期间可能会更新一些芯片包，如不需要可直接点击cancel,然后选择自己的芯片</li><li>进行一些基本的配置并创建项目  <ul><li>打开系统总线<br> <img src="/../images/8.8/1659965550539.jpg"></li><li>启用外部晶振<br> <img src="/../images/8.8/1659965903414.jpg"></li><li>进行自己需要的一些配置，如我此处初始化PA1为output<br> <img src="/../images/8.8/1659965742730.jpg"></li><li>配置时钟树，直接输入72即可<br> <img src="/../images/8.8/1659965975312.jpg"></li><li>配置项目基本信息<br> <img src="/../images/8.8/1659966099120.jpg"><br> <img src="/../images/8.8/1659966229888.jpg"></li><li>创建项目</li></ul></li></ol><hr><h2 id="三-platformio创建工程"><a href="#三-platformio创建工程" class="headerlink" title="三. platformio创建工程"></a>三. platformio创建工程</h2><ol start="3"><li>打开paltformio创建项目工程  <ul><li>点击new project</li><li>选择对应的芯片</li><li>framworks选择cubemax</li><li><strong>注意：项目名称和路径都要和cubemx创建的对应</strong><br> <img src="/../images/8.8/1659966474429.jpg"></li><li>开始创建<br> 由于是第一次创建项目，platformio需要从github上下载对应的资源，因此速度非常慢，忍受不了的可以想办法加速（dddd）</li></ul></li><li>创建成功后，修改platformio.ini配置文件,可以根据自己具体情况进行修改<br> <img src="/../images/8.8/1659966892806.jpg"></li><li>编译并下载<br> <img src="/../images/8.8/1659967055693.jpg"><br> 其中勾号是编译，箭头是下载</li></ol>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
      <category>stm32</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stm32</tag>
      
      <tag>hal库</tag>
      
      <tag>platformio</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建教程</title>
    <link href="/2022/08/07/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <url>/2022/08/07/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="一-安装所需的软件"><a href="#一-安装所需的软件" class="headerlink" title="一. 安装所需的软件"></a>一. 安装所需的软件</h2><ol><li><p>npm<br> npm是随同node.js一起安装的包管理工具,能解决NodeJS代码部署上的很多问题  </p></li><li><p>node.js  </p><ul><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。  </li><li>Node.js 使用了一个事件驱动、非阻塞式 I&#x2F;O 的模型,使其轻量又高效。</li><li>Node.js 的包管理器 npm,是全球最大的开源库生态系统。</li></ul></li><li><p>git<br> Git是一个开源的分布式版本控制系统,可以有效、高速地处理从很小到非常大的项目版本管理<br>   <a href="https://git-scm.com/">git官网</a>  </p></li><li><p>hexo<br>  一款简洁高效的个人博客搭建框架<br> <a href="https://hexo.io/zh-cn/">hexo官网</a><br> <a href="https://hexo.io/zh-cn/docs/">hexo中文文档</a></p></li></ol><p><strong>检测是否安装成功</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">$ git --version</span><br><span class="line">$ node -v</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure><hr><h2 id="二-初始化"><a href="#二-初始化" class="headerlink" title="二. 初始化"></a>二. 初始化</h2><ol><li>新建一个文件夹(如：MyBlog)</li><li>进入文件夹，右键选择git bash here</li><li>输入命令 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>可以看到文件里生成了许多文件</li><li>输入 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g#生成静态网页文件(生成文件夹public)</span><br><span class="line">$ hexo s#开启服务</span><br></pre></td></tr></table></figure></li><li>在浏览器输入localhost:4000&#x2F;即可看到hello word网页</li></ol><hr><h2 id="三-更改主题"><a href="#三-更改主题" class="headerlink" title="三. 更改主题"></a>三. 更改主题</h2><ol><li>进入<a href="https://hexo.io/themes/">主题</a>网站查看自己喜欢的主题</li><li><ul><li>点击喜欢的主题进入对应的github。</li><li>根据里面的readme进行下载，可以用git命令下载，也可以直接下载压缩包解压，注意主题文件要放入MyBlog&#x2F;theme文件夹中。</li><li>然后在MyBlog&#x2F;_config.yml中找到theme: 将后面改为与你下载的主题文件夹同名，注意 : 后面要有一个空格。</li></ul></li><li>在git bash中输入命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li><li>重新打开localhost:4000&#x2F;查看主题是否生效</li></ol><p><strong>注意根目录下和theme目录下都应该有一个_config.yml,前者是配置全局的一些设置，后者是配置这个主题的一些设置</strong></p><hr><h2 id="四-自定义"><a href="#四-自定义" class="headerlink" title="四. 自定义"></a>四. 自定义</h2><ol><li>输入以下命令会在MyBlog&#x2F;source下生成文件夹，并在文件夹中生成index.md文件，具体可以根据你下载的主题进行配置 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;example&quot;</span><br></pre></td></tr></table></figure> <strong>生成后的index文件需要进行一些修改，如指定好layout，否则在执行hexo g的时候可能会报错</strong></li><li>一般来说需要建立几个特殊的文件夹，如tags，categories <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;tags&quot;</span><br><span class="line">$ hexo new page &quot;categories&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure> 然后在生成的index.md的font-matter添加一些信息，如 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: tags</span><br></pre></td></tr></table></figure></li><li>制作自定义的网页<ul><li>一般来说，网页采取特定布局就放在MyBlog&#x2F;source的特定文件夹下</li><li>用markdown(.md文件)制作<br> 输入以下命令可以生成指定布局的文章，默认为post <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li>需要在Front-matter，也就是是文件最上方以 — 分隔的区域，用于指定个别文件的变量，如： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>编写好.md文件后输入以下命令： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean $$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li><li>打开localhost:4000&#x2F;查看是否生效</li></ul></li></ol><hr><h2 id="五-github部署"><a href="#五-github部署" class="headerlink" title="五. github部署"></a>五. github部署</h2><ol><li><p>在github中新建仓库，仓库名为[username].github.io</p></li><li><p>安装 hexo-deployer-git.</p></li><li><p>在 _config.yml（如果有已存在的请删除）添加如下配置：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure></li><li><p>运行 </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p> 有时候可能会报错连接错误，可以想办法加速(dddd)或者多试几次。</p></li><li><p>查看 username.github.io 上的网页是否部署成功。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sheng&#39;s blog</title>
    <link href="/2022/08/06/index/"/>
    <url>/2022/08/06/index/</url>
    
    <content type="html"><![CDATA[<h3 id="欢迎来到帅比升的个人博客"><a href="#欢迎来到帅比升的个人博客" class="headerlink" title=" 欢迎来到帅比升的个人博客"></a><center> 欢迎来到帅比升的个人博客</h3>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
